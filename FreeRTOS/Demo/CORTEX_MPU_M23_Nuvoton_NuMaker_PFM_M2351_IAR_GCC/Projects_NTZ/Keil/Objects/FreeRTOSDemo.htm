<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\FreeRTOSDemo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\FreeRTOSDemo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Tue Jun 27 20:50:33 2023
<BR><P>
<H3>Maximum Stack Usage =       1248 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; prvCreateTasks &rArr; vStartTests &rArr; vStartMessageBufferTasks &rArr; MPU_xStreamBufferGenericCreate &rArr; xStreamBufferGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[32]">ACMP01_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">ACMP01_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[32]">ACMP01_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[6]">BOD_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[4b]">BPWM0_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[4c]">BPWM1_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[1e]">BRAKE0_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[22]">BRAKE1_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[3c]">CAN0_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[a]">CLKFAIL_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[44]">CRPT_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[2f]">DAC_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[b]">DEFAULT_IRQHandler</a> from startup_m2351.o(.text) referenced 22 times from startup_m2351.o(RESET)
 <LI><a href="#[30]">EADC0_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[31]">EADC1_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[33]">EADC2_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[34]">EADC3_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[50]">ECAP0_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[51]">ECAP1_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[10]">EINT0_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[11]">EINT1_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[12]">EINT2_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[13]">EINT3_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[14]">EINT4_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[15]">EINT5_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[46]">EINT6_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[53]">EINT7_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[1f]">EPWM0_P0_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[20]">EPWM0_P1_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[21]">EPWM0_P2_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[23]">EPWM1_P0_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[24]">EPWM1_P1_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[25]">EPWM1_P2_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[16]">GPA_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[17]">GPB_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[18]">GPC_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[19]">GPD_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[1a]">GPE_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[1b]">GPF_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[45]">GPG_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[52]">GPH_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from main.o(.text.HardFault_Handler) referenced from startup_m2351.o(RESET)
 <LI><a href="#[2c]">I2C0_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[2d]">I2C1_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[4d]">I2C2_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[42]">I2S0_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[7]">IRC_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[43]">OPA0_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[2e]">PDMA0_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[54]">PDMA1_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[8]">PWRWU_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from portasm.o(privileged_functions) referenced from startup_m2351.o(RESET)
 <LI><a href="#[60]">ProcessHardFault</a> from retarget.o(.text.ProcessHardFault) referenced from startup_m2351.o(.text)
 <LI><a href="#[4e]">QEI0_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[4f]">QEI1_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[1c]">QSPI0_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[c]">RTC_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[3d]">SC0_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[3e]">SC1_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[3f]">SC2_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[55]">SCU_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[41]">SDH0_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[61]">SH_Return</a> from retarget.o(.text.SH_Return) referenced from startup_m2351.o(.text)
 <LI><a href="#[1d]">SPI0_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[37]">SPI1_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[38]">SPI2_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[9]">SRAM_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from portasm.o(privileged_functions) referenced from startup_m2351.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from port.o(privileged_functions) referenced from startup_m2351.o(RESET)
 <LI><a href="#[5e]">SystemInit</a> from system_m2351.o(.text.SystemInit) referenced from startup_m2351.o(.text)
 <LI><a href="#[d]">TAMPER_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[26]">TMR0_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[27]">TMR1_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[28]">TMR2_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[29]">TMR3_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[56]">TRNG_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[2a]">UART0_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[2b]">UART1_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[35]">UART2_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[36]">UART3_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[47]">UART4_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[48]">UART5_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[39]">USBD_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[3a]">USBH_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[3b]">USBOTG_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[49]">USCI0_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[4a]">USCI1_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[e]">WDT_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[f]">WWDT_IRQHandler</a> from startup_m2351.o(.text) referenced from startup_m2351.o(RESET)
 <LI><a href="#[5f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_m2351.o(.text)
 <LI><a href="#[84]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[83]">fputc</a> from retarget.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[57]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[90]">prv1stHigherPriorityNormallyFullTask</a> from intqueue.o(.text.prv1stHigherPriorityNormallyFullTask) referenced from intqueue.o(.rodata..L__const.vStartInterruptQueueTasks.x1stHigherPriorityNormallyFullTaskParameters)
 <LI><a href="#[91]">prv2ndHigherPriorityNormallyFullTask</a> from intqueue.o(.text.prv2ndHigherPriorityNormallyFullTask) referenced from intqueue.o(.rodata..L__const.vStartInterruptQueueTasks.x2ndHigherPriorityNormallyFullTaskParameters)
 <LI><a href="#[63]">prvAutoReloadTimerCallback</a> from timerdemo.o(.text.prvAutoReloadTimerCallback) referenced 4 times from timerdemo.o(.text.prvTest1_CreateTimersWithoutSchedulerRunning)
 <LI><a href="#[67]">prvBlockingTask</a> from abortdelay.o(.text.prvBlockingTask) referenced 2 times from abortdelay.o(.text.vCreateAbortDelayTasks)
 <LI><a href="#[b3]">prvCheckTask</a> from testrunner.o(.text.prvCheckTask) referenced from testrunner.o(.rodata..L__const.vStartTests.xCheckTaskParameters)
 <LI><a href="#[66]">prvControllingTask</a> from abortdelay.o(.text.prvControllingTask) referenced 2 times from abortdelay.o(.text.vCreateAbortDelayTasks)
 <LI><a href="#[85]">prvCountingSemaphoreTask</a> from countsem.o(.text.prvCountingSemaphoreTask) referenced from countsem.o(.rodata..L__const.vStartCountingSemaphoreTasks.xCountingSemaphoreTask1)
 <LI><a href="#[85]">prvCountingSemaphoreTask</a> from countsem.o(.text.prvCountingSemaphoreTask) referenced from countsem.o(.rodata..L__const.vStartCountingSemaphoreTasks.xCountingSemaphoreTask2)
 <LI><a href="#[9b]">prvEchoClient</a> from messagebufferdemo.o(.text.prvEchoClient) referenced from messagebufferdemo.o(.rodata..L__const.vStartMessageBufferTasks.xEchoClientTask1Parameters)
 <LI><a href="#[9b]">prvEchoClient</a> from messagebufferdemo.o(.text.prvEchoClient) referenced from messagebufferdemo.o(.rodata..L__const.vStartMessageBufferTasks.xEchoClientTask2Parameters)
 <LI><a href="#[aa]">prvEchoClient</a> from streambufferdemo.o(.text.prvEchoClient) referenced from streambufferdemo.o(.rodata..L__const.vStartStreamBufferTasks.xEchoClientTask1Parameters)
 <LI><a href="#[aa]">prvEchoClient</a> from streambufferdemo.o(.text.prvEchoClient) referenced from streambufferdemo.o(.rodata..L__const.vStartStreamBufferTasks.xEchoClientTask2Parameters)
 <LI><a href="#[9c]">prvEchoServer</a> from messagebufferdemo.o(.text.prvEchoServer) referenced from messagebufferdemo.o(.rodata..L__const.vStartMessageBufferTasks.xEchoServerTask1Parameters)
 <LI><a href="#[9c]">prvEchoServer</a> from messagebufferdemo.o(.text.prvEchoServer) referenced from messagebufferdemo.o(.rodata..L__const.vStartMessageBufferTasks.xEchoServerTask2Parameters)
 <LI><a href="#[ab]">prvEchoServer</a> from streambufferdemo.o(.text.prvEchoServer) referenced from streambufferdemo.o(.rodata..L__const.vStartStreamBufferTasks.xEchoServerTask1Parameters)
 <LI><a href="#[ab]">prvEchoServer</a> from streambufferdemo.o(.text.prvEchoServer) referenced from streambufferdemo.o(.rodata..L__const.vStartStreamBufferTasks.xEchoServerTask2Parameters)
 <LI><a href="#[6e]">prvHighPriorityMutexTask</a> from genqtest.o(.text.prvHighPriorityMutexTask) referenced 2 times from genqtest.o(.text.vStartGenericQueueTasks)
 <LI><a href="#[78]">prvHighPriorityPeekTask</a> from qpeek.o(.text.prvHighPriorityPeekTask) referenced 2 times from qpeek.o(.text.vStartQueuePeekTasks)
 <LI><a href="#[8f]">prvHigherPriorityNormallyEmptyTask</a> from intqueue.o(.text.prvHigherPriorityNormallyEmptyTask) referenced from intqueue.o(.rodata..L__const.vStartInterruptQueueTasks.x1stHigherPriorityNormallyEmptyTaskParameters)
 <LI><a href="#[8f]">prvHigherPriorityNormallyEmptyTask</a> from intqueue.o(.text.prvHigherPriorityNormallyEmptyTask) referenced from intqueue.o(.rodata..L__const.vStartInterruptQueueTasks.x2ndHigherPriorityNormallyEmptyTaskParameters)
 <LI><a href="#[79]">prvHighestPriorityPeekTask</a> from qpeek.o(.text.prvHighestPriorityPeekTask) referenced 2 times from qpeek.o(.text.vStartQueuePeekTasks)
 <LI><a href="#[64]">prvISRAutoReloadTimerCallback</a> from timerdemo.o(.text.prvISRAutoReloadTimerCallback) referenced 2 times from timerdemo.o(.text.prvTest1_CreateTimersWithoutSchedulerRunning)
 <LI><a href="#[65]">prvISROneShotTimerCallback</a> from timerdemo.o(.text.prvISROneShotTimerCallback) referenced 2 times from timerdemo.o(.text.prvTest1_CreateTimersWithoutSchedulerRunning)
 <LI><a href="#[5a]">prvIdleTask</a> from tasks.o(privileged_functions) referenced 2 times from tasks.o(privileged_functions)
 <LI><a href="#[ac]">prvInterruptTriggerLevelTest</a> from streambufferdemo.o(.text.prvInterruptTriggerLevelTest) referenced from streambufferdemo.o(.rodata..L__const.vStartStreamBufferTasks.xInterruptTriggerLevelTestTaskParameters)
 <LI><a href="#[6d]">prvLowPriorityMutexTask</a> from genqtest.o(.text.prvLowPriorityMutexTask) referenced 2 times from genqtest.o(.text.vStartGenericQueueTasks)
 <LI><a href="#[7a]">prvLowPriorityPeekTask</a> from qpeek.o(.text.prvLowPriorityPeekTask) referenced 2 times from qpeek.o(.text.vStartQueuePeekTasks)
 <LI><a href="#[92]">prvLowerPriorityNormallyEmptyTask</a> from intqueue.o(.text.prvLowerPriorityNormallyEmptyTask) referenced from intqueue.o(.rodata..L__const.vStartInterruptQueueTasks.xLowerPriorityNormallyEmptyTaskParameters)
 <LI><a href="#[93]">prvLowerPriorityNormallyFullTask</a> from intqueue.o(.text.prvLowerPriorityNormallyFullTask) referenced from intqueue.o(.rodata..L__const.vStartInterruptQueueTasks.xLowerPriorityNormallyFullTaskParameters)
 <LI><a href="#[8e]">prvMediumPriorityMutexTask</a> from genqtest.o(.text.prvMediumPriorityMutexTask) referenced from genqtest.o(.rodata..L__const.vStartGenericQueueTasks.xMediumPriorityMutexTaskParameters)
 <LI><a href="#[77]">prvMediumPriorityPeekTask</a> from qpeek.o(.text.prvMediumPriorityPeekTask) referenced 2 times from qpeek.o(.text.vStartQueuePeekTasks)
 <LI><a href="#[9d]">prvNonBlockingReceiverTask</a> from messagebufferdemo.o(.text.prvNonBlockingReceiverTask) referenced from messagebufferdemo.o(.rodata..L__const.vStartMessageBufferTasks.xNonBlockingReceiverTaskParameters)
 <LI><a href="#[ad]">prvNonBlockingReceiverTask</a> from streambufferdemo.o(.text.prvNonBlockingReceiverTask) referenced from streambufferdemo.o(.rodata..L__const.vStartStreamBufferTasks.xNonBlockingReceiverTaskParameters)
 <LI><a href="#[9e]">prvNonBlockingSenderTask</a> from messagebufferdemo.o(.text.prvNonBlockingSenderTask) referenced from messagebufferdemo.o(.rodata..L__const.vStartMessageBufferTasks.xNonBlockingSenderTaskParameters)
 <LI><a href="#[ae]">prvNonBlockingSenderTask</a> from streambufferdemo.o(.text.prvNonBlockingSenderTask) referenced from streambufferdemo.o(.rodata..L__const.vStartStreamBufferTasks.xNonBlockingSenderTaskParameters)
 <LI><a href="#[b1]">prvNotifiedTask</a> from tasknotifyarray.o(.text.prvNotifiedTask) referenced from tasknotifyarray.o(.rodata..L__const.vStartTaskNotifyArrayTask.xNotifiedTask)
 <LI><a href="#[b2]">prvNotifiedTask</a> from tasknotify.o(.text.prvNotifiedTask) referenced from tasknotify.o(.rodata..L__const.vStartTaskNotifyTask.xNotifiedTask)
 <LI><a href="#[80]">prvNotifyingTimer</a> from tasknotify.o(.text.prvNotifyingTimer) referenced 2 times from tasknotify.o(.text.vStartTaskNotifyTask)
 <LI><a href="#[7d]">prvNotifyingTimerCallback</a> from tasknotifyarray.o(.text.prvNotifyingTimerCallback) referenced 2 times from tasknotifyarray.o(.text.vStartTaskNotifyArrayTask)
 <LI><a href="#[82]">prvOneShotTimerCallback</a> from timerdemo.o(.text.prvOneShotTimerCallback) referenced 2 times from timerdemo.o(.text.vStartTimerDemoTask)
 <LI><a href="#[76]">prvQueueOverwriteTask</a> from queueoverwrite.o(.text.prvQueueOverwriteTask) referenced 2 times from queueoverwrite.o(.text.vStartQueueOverwriteTask)
 <LI><a href="#[a1]">prvQueueSetReceivingTask</a> from queuesetpolling.o(.text.prvQueueSetReceivingTask) referenced from queuesetpolling.o(.rodata..L__const.vStartQueueSetPollingTask.xQueueSetReceivingTaskParameters)
 <LI><a href="#[a2]">prvQueueSetReceivingTask</a> from queueset.o(.text.prvQueueSetReceivingTask) referenced from queueset.o(.rodata..L__const.vStartQueueSetTasks.xQueueSetReceivingTaskParameters)
 <LI><a href="#[a3]">prvQueueSetSendingTask</a> from queueset.o(.text.prvQueueSetSendingTask) referenced from queueset.o(.rodata..L__const.vStartQueueSetTasks.xQueueSetSendingTaskParameters)
 <LI><a href="#[97]">prvROAccessTask</a> from mpu_demo.o(.text.prvROAccessTask) referenced from mpu_demo.o(.rodata..L__const.vStartMPUDemo.xROAccessTaskParameters)
 <LI><a href="#[98]">prvRWAccessTask</a> from mpu_demo.o(.text.prvRWAccessTask) referenced from mpu_demo.o(.rodata..L__const.vStartMPUDemo.xRWAccessTaskParameters)
 <LI><a href="#[7e]">prvRand</a> from tasknotifyarray.o(.text.prvRand) referenced 2 times from tasknotifyarray.o(.text.vStartTaskNotifyArrayTask)
 <LI><a href="#[7f]">prvRand</a> from tasknotify.o(.text.prvRand) referenced 2 times from tasknotify.o(.text.vStartTaskNotifyTask)
 <LI><a href="#[9f]">prvReceiverTask</a> from messagebufferdemo.o(.text.prvReceiverTask) referenced from messagebufferdemo.o(.rodata..L__const.vStartMessageBufferTasks.xReceivingTask1Parameters)
 <LI><a href="#[9f]">prvReceiverTask</a> from messagebufferdemo.o(.text.prvReceiverTask) referenced from messagebufferdemo.o(.rodata..L__const.vStartMessageBufferTasks.xReceivingTask2Parameters)
 <LI><a href="#[af]">prvReceiverTask</a> from streambufferdemo.o(.text.prvReceiverTask) referenced from streambufferdemo.o(.rodata..L__const.vStartStreamBufferTasks.xReceivingTask1Parameters)
 <LI><a href="#[af]">prvReceiverTask</a> from streambufferdemo.o(.text.prvReceiverTask) referenced from streambufferdemo.o(.rodata..L__const.vStartStreamBufferTasks.xReceivingTask2Parameters)
 <LI><a href="#[a9]">prvReceivingTask</a> from streambufferinterrupt.o(.text.prvReceivingTask) referenced from streambufferinterrupt.o(.rodata..L__const.vStartStreamBufferInterruptDemo.xReceivingTaskParameters)
 <LI><a href="#[a4]">prvRecursiveMutexBlockingTask</a> from recmutex.o(.text.prvRecursiveMutexBlockingTask) referenced from recmutex.o(.rodata..L__const.vStartRecursiveMutexTasks.xRecursiveMutexBlockingTaskParameters)
 <LI><a href="#[a5]">prvRecursiveMutexControllingTask</a> from recmutex.o(.text.prvRecursiveMutexControllingTask) referenced from recmutex.o(.rodata..L__const.vStartRecursiveMutexTasks.xRecursiveMutexControllingTaskParameters)
 <LI><a href="#[a6]">prvRecursiveMutexPollingTask</a> from recmutex.o(.text.prvRecursiveMutexPollingTask) referenced from recmutex.o(.rodata..L__const.vStartRecursiveMutexTasks.xRecursiveMutexPollingTaskParameters)
 <LI><a href="#[a7]">prvRegTest1_Task</a> from reg_tests.o(.text.prvRegTest1_Task) referenced from reg_tests.o(.rodata..L__const.vStartRegisterTasks.xRegTest1TaskParameters)
 <LI><a href="#[a8]">prvRegTest2_Task</a> from reg_tests.o(.text.prvRegTest2_Task) referenced from reg_tests.o(.rodata..L__const.vStartRegisterTasks.xRegTest2TaskParameters)
 <LI><a href="#[7b]">prvSemaphoreTest</a> from semtest.o(.text.prvSemaphoreTest) referenced 4 times from semtest.o(.text.vStartSemaphoreTasks)
 <LI><a href="#[6c]">prvSendFrontAndBackTest</a> from genqtest.o(.text.prvSendFrontAndBackTest) referenced 2 times from genqtest.o(.text.vStartGenericQueueTasks)
 <LI><a href="#[a0]">prvSenderTask</a> from messagebufferdemo.o(.text.prvSenderTask) referenced from messagebufferdemo.o(.rodata..L__const.vStartMessageBufferTasks.xSenderTask1Parameters)
 <LI><a href="#[a0]">prvSenderTask</a> from messagebufferdemo.o(.text.prvSenderTask) referenced from messagebufferdemo.o(.rodata..L__const.vStartMessageBufferTasks.xSenderTask2Parameters)
 <LI><a href="#[b0]">prvSenderTask</a> from streambufferdemo.o(.text.prvSenderTask) referenced from streambufferdemo.o(.rodata..L__const.vStartStreamBufferTasks.xSenderTask1Parameters)
 <LI><a href="#[b0]">prvSenderTask</a> from streambufferdemo.o(.text.prvSenderTask) referenced from streambufferdemo.o(.rodata..L__const.vStartStreamBufferTasks.xSenderTask2Parameters)
 <LI><a href="#[99]">prvSpaceAvailableCoherenceActor</a> from messagebufferdemo.o(.text.prvSpaceAvailableCoherenceActor) referenced from messagebufferdemo.o(.rodata..L__const.vStartMessageBufferTasks.xCoherenceActorTaskParameters)
 <LI><a href="#[9a]">prvSpaceAvailableCoherenceTester</a> from messagebufferdemo.o(.text.prvSpaceAvailableCoherenceTester) referenced from messagebufferdemo.o(.rodata..L__const.vStartMessageBufferTasks.xCoherenceTesterTaskParameters)
 <LI><a href="#[7c]">prvSuspendedTaskTimerTestCallback</a> from tasknotifyarray.o(.text.prvSuspendedTaskTimerTestCallback) referenced 2 times from tasknotifyarray.o(.text.vStartTaskNotifyArrayTask)
 <LI><a href="#[81]">prvSuspendedTaskTimerTestCallback</a> from tasknotify.o(.text.prvSuspendedTaskTimerTestCallback) referenced 2 times from tasknotify.o(.text.vStartTaskNotifyTask)
 <LI><a href="#[8b]">prvSyncTask</a> from eventgroupsdemo.o(.text.prvSyncTask) referenced from eventgroupsdemo.o(.rodata..L__const.vStartEventGroupTasks.xSyncTaskOneParams)
 <LI><a href="#[8b]">prvSyncTask</a> from eventgroupsdemo.o(.text.prvSyncTask) referenced from eventgroupsdemo.o(.rodata..L__const.vStartEventGroupTasks.xSyncTaskTwoParams)
 <LI><a href="#[5c]">prvTaskExitError</a> from port.o(.text.prvTaskExitError) referenced 2 times from port.o(privileged_functions)
 <LI><a href="#[8c]">prvTestMasterTask</a> from eventgroupsdemo.o(.text.prvTestMasterTask) referenced from eventgroupsdemo.o(.rodata..L__const.vStartEventGroupTasks.xTestMasterTaskParams)
 <LI><a href="#[8d]">prvTestSlaveTask</a> from eventgroupsdemo.o(.text.prvTestSlaveTask) referenced from eventgroupsdemo.o(.rodata..L__const.vStartEventGroupTasks.xTestSlaveTaskParams)
 <LI><a href="#[5b]">prvTimerTask</a> from timers.o(privileged_functions) referenced 2 times from timers.o(privileged_functions)
 <LI><a href="#[b4]">prvTimerTestTask</a> from timerdemo.o(.text.prvTimerTestTask) referenced from timerdemo.o(.rodata..L__const.vStartTimerDemoTask.xTimerTestTaskParameters)
 <LI><a href="#[6a]">vBlockingQueueConsumer</a> from blockq.o(.text.vBlockingQueueConsumer) referenced 2 times from blockq.o(.text.vStartBlockingQueueTasks)
 <LI><a href="#[6b]">vBlockingQueueProducer</a> from blockq.o(.text.vBlockingQueueProducer) referenced 2 times from blockq.o(.text.vStartBlockingQueueTasks)
 <LI><a href="#[6f]">vCompeteingIntMathTask</a> from integer.o(.text.vCompeteingIntMathTask) referenced 2 times from integer.o(.text.vStartIntegerMathTasks)
 <LI><a href="#[70]">vCompetingMathTask1</a> from flop.o(.text.vCompetingMathTask1) referenced 2 times from flop.o(.text.vStartMathTasks)
 <LI><a href="#[71]">vCompetingMathTask2</a> from flop.o(.text.vCompetingMathTask2) referenced 2 times from flop.o(.text.vStartMathTasks)
 <LI><a href="#[72]">vCompetingMathTask3</a> from flop.o(.text.vCompetingMathTask3) referenced 2 times from flop.o(.text.vStartMathTasks)
 <LI><a href="#[73]">vCompetingMathTask4</a> from flop.o(.text.vCompetingMathTask4) referenced 2 times from flop.o(.text.vStartMathTasks)
 <LI><a href="#[86]">vContinuousIncrementTask</a> from dynamic.o(.text.vContinuousIncrementTask) referenced from dynamic.o(.rodata..L__const.vStartDynamicPriorityTasks.xContinuousIncrementTask)
 <LI><a href="#[87]">vCounterControlTask</a> from dynamic.o(.text.vCounterControlTask) referenced from dynamic.o(.rodata..L__const.vStartDynamicPriorityTasks.xCounterControlTask)
 <LI><a href="#[58]">vEventGroupClearBitsCallback</a> from event_groups.o(privileged_functions) referenced 2 times from event_groups.o(privileged_functions)
 <LI><a href="#[59]">vEventGroupSetBitsCallback</a> from event_groups.o(privileged_functions) referenced 2 times from event_groups.o(privileged_functions)
 <LI><a href="#[62]">vHandleMemoryFault</a> from mpu_demo.o(.text.vHandleMemoryFault) referenced from main.o(.text.HardFault_Handler)
 <LI><a href="#[94]">vInterruptCountingSemaphoreTask</a> from intsemtest.o(.text.vInterruptCountingSemaphoreTask) referenced from intsemtest.o(.rodata..L__const.vStartInterruptSemaphoreTasks.xInterruptCountingSemaphoreTaskParameters)
 <LI><a href="#[95]">vInterruptMutexMasterTask</a> from intsemtest.o(.text.vInterruptMutexMasterTask) referenced from intsemtest.o(.rodata..L__const.vStartInterruptSemaphoreTasks.xInterruptMutexMasterTaskParameters)
 <LI><a href="#[96]">vInterruptMutexSlaveTask</a> from intsemtest.o(.text.vInterruptMutexSlaveTask) referenced from intsemtest.o(.rodata..L__const.vStartInterruptSemaphoreTasks.xInterruptMutexSlaveTaskParameters)
 <LI><a href="#[88]">vLimitedIncrementTask</a> from dynamic.o(.text.vLimitedIncrementTask) referenced from dynamic.o(.rodata..L__const.vStartDynamicPriorityTasks.xLimitedIncrementTask)
 <LI><a href="#[74]">vPolledQueueConsumer</a> from pollq.o(.text.vPolledQueueConsumer) referenced 2 times from pollq.o(.text.vStartPolledQueueTasks)
 <LI><a href="#[75]">vPolledQueueProducer</a> from pollq.o(.text.vPolledQueueProducer) referenced 2 times from pollq.o(.text.vStartPolledQueueTasks)
 <LI><a href="#[5d]">vPortSVCHandler_C</a> from port.o(privileged_functions) referenced from portasm.o(privileged_functions)
 <LI><a href="#[68]">vPrimaryBlockTimeTestTask</a> from blocktim.o(.text.vPrimaryBlockTimeTestTask) referenced 2 times from blocktim.o(.text.vCreateBlockTimeTasks)
 <LI><a href="#[89]">vQueueReceiveWhenSuspendedTask</a> from dynamic.o(.text.vQueueReceiveWhenSuspendedTask) referenced from dynamic.o(.rodata..L__const.vStartDynamicPriorityTasks.xQueueReceiveWhenSuspendedTask)
 <LI><a href="#[8a]">vQueueSendWhenSuspendedTask</a> from dynamic.o(.text.vQueueSendWhenSuspendedTask) referenced from dynamic.o(.rodata..L__const.vStartDynamicPriorityTasks.xQueueSendWhenSuspendedTask)
 <LI><a href="#[69]">vSecondaryBlockTimeTestTask</a> from blocktim.o(.text.vSecondaryBlockTimeTestTask) referenced 2 times from blocktim.o(.text.vCreateBlockTimeTasks)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(.text)
</UL>
<P><STRONG><a name="[25f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[126]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[128]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[260]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[261]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[262]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[263]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[264]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[127]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[265]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[267]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[268]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[129]"></a>xEventGroupCreateStatic</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, event_groups.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = xEventGroupCreateStatic &rArr; vListInitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupCreateStatic
</UL>

<P><STRONG><a name="[12b]"></a>xEventGroupCreate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, event_groups.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupCreate
</UL>

<P><STRONG><a name="[115]"></a>xEventGroupSync</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, event_groups.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = xEventGroupSync &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupSync
</UL>

<P><STRONG><a name="[113]"></a>xEventGroupSetBits</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, event_groups.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupSetBits
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupSetBitsCallback
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
</UL>

<P><STRONG><a name="[10f]"></a>xEventGroupWaitBits</STRONG> (Thumb, 364 bytes, Stack size 56 bytes, event_groups.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestWaitCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupWaitBits
</UL>

<P><STRONG><a name="[111]"></a>xEventGroupClearBits</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, event_groups.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xEventGroupClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupClearBits
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupClearBitsCallback
</UL>

<P><STRONG><a name="[136]"></a>xEventGroupClearBitsFromISR</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, event_groups.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>

<P><STRONG><a name="[58]"></a>vEventGroupClearBitsCallback</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, event_groups.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vEventGroupClearBitsCallback &rArr; xEventGroupClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> event_groups.o(privileged_functions)
</UL>
<P><STRONG><a name="[138]"></a>xEventGroupGetBitsFromISR</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, event_groups.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMask
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[13b]"></a>vEventGroupDelete</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, event_groups.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vEventGroupDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vEventGroupDelete
</UL>

<P><STRONG><a name="[269]"></a>xEventGroupGetStaticBuffer</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, event_groups.o(privileged_functions), UNUSED)

<P><STRONG><a name="[59]"></a>vEventGroupSetBitsCallback</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, event_groups.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vEventGroupSetBitsCallback &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> event_groups.o(privileged_functions)
</UL>
<P><STRONG><a name="[13d]"></a>xEventGroupSetBitsFromISR</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, event_groups.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>

<P><STRONG><a name="[26a]"></a>uxEventGroupGetNumber</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, event_groups.o(privileged_functions), UNUSED)

<P><STRONG><a name="[26b]"></a>vEventGroupSetNumber</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, event_groups.o(privileged_functions), UNUSED)

<P><STRONG><a name="[12a]"></a>vListInitialise</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, list.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreateStatic
</UL>

<P><STRONG><a name="[177]"></a>vListInitialiseItem</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, list.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[180]"></a>vListInsertEnd</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, list.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[184]"></a>vListInsert</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, list.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[17f]"></a>uxListRemove</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, list.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskAbortDelay
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
</UL>

<P><STRONG><a name="[13e]"></a>xQueueGenericReset</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericReset
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[140]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericCreateStatic
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
</UL>

<P><STRONG><a name="[26c]"></a>xQueueGenericGetStaticBuffers</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, queue.o(privileged_functions), UNUSED)

<P><STRONG><a name="[142]"></a>xQueueGenericCreate</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericCreate
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateSet
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[143]"></a>xQueueCreateMutex</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueCreateMutex
</UL>

<P><STRONG><a name="[145]"></a>xQueueCreateMutexStatic</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, queue.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueCreateMutexStatic
</UL>

<P><STRONG><a name="[f1]"></a>xQueueGetMutexHolder</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xQueueGetMutexHolder
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGetMutexHolder
</UL>

<P><STRONG><a name="[21b]"></a>xQueueGetMutexHolderFromISR</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xQueueGetMutexHolderFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHighPriorityTimeout
</UL>

<P><STRONG><a name="[f5]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[e5]"></a>xQueueGenericSend</STRONG> (Thumb, 488 bytes, Stack size 64 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCall
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>

<P><STRONG><a name="[f3]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueTakeMutexRecursive
</UL>

<P><STRONG><a name="[ef]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 442 bytes, Stack size 56 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetDisinheritPriorityAfterTimeout
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueSemaphoreTake
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>

<P><STRONG><a name="[151]"></a>xQueueCreateCountingSemaphoreStatic</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, queue.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueCreateCountingSemaphoreStatic
</UL>

<P><STRONG><a name="[152]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueCreateCountingSemaphore
</UL>

<P><STRONG><a name="[156]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 358 bytes, Stack size 64 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMask
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>

<P><STRONG><a name="[157]"></a>xQueueGiveFromISR</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, queue.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMask
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[eb]"></a>xQueueReceive</STRONG> (Thumb, 388 bytes, Stack size 56 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueReceive
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSelectFromSet
</UL>

<P><STRONG><a name="[ed]"></a>xQueuePeek</STRONG> (Thumb, 392 bytes, Stack size 56 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = xQueuePeek &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueuePeek
</UL>

<P><STRONG><a name="[159]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, queue.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMask
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSelectFromSetFromISR
</UL>

<P><STRONG><a name="[15a]"></a>xQueuePeekFromISR</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, queue.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMask
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[e7]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uxQueueMessagesWaiting
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxQueueMessagesWaiting
</UL>

<P><STRONG><a name="[e9]"></a>uxQueueSpacesAvailable</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uxQueueSpacesAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxQueueSpacesAvailable
</UL>

<P><STRONG><a name="[26d]"></a>uxQueueMessagesWaitingFromISR</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, queue.o(privileged_functions), UNUSED)

<P><STRONG><a name="[15b]"></a>vQueueDelete</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vQueueDelete
</UL>

<P><STRONG><a name="[26e]"></a>uxQueueGetQueueNumber</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, queue.o(privileged_functions), UNUSED)

<P><STRONG><a name="[26f]"></a>vQueueSetQueueNumber</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, queue.o(privileged_functions), UNUSED)

<P><STRONG><a name="[270]"></a>ucQueueGetQueueType</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, queue.o(privileged_functions), UNUSED)

<P><STRONG><a name="[271]"></a>uxQueueGetQueueItemSize</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, queue.o(privileged_functions), UNUSED)

<P><STRONG><a name="[272]"></a>xQueueIsQueueEmptyFromISR</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, queue.o(privileged_functions), UNUSED)

<P><STRONG><a name="[273]"></a>xQueueIsQueueFullFromISR</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, queue.o(privileged_functions), UNUSED)

<P><STRONG><a name="[15c]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[15e]"></a>xQueueCreateSet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = xQueueCreateSet &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueCreateSet
</UL>

<P><STRONG><a name="[f9]"></a>xQueueAddToSet</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xQueueAddToSet
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueAddToSet
</UL>

<P><STRONG><a name="[15f]"></a>xQueueRemoveFromSet</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xQueueRemoveFromSet
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueRemoveFromSet
</UL>

<P><STRONG><a name="[f7]"></a>xQueueSelectFromSet</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = xQueueSelectFromSet &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueSelectFromSet
</UL>

<P><STRONG><a name="[160]"></a>xQueueSelectFromSetFromISR</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, queue.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>

<P><STRONG><a name="[161]"></a>xStreamBufferGenericCreate</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, stream_buffer.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = xStreamBufferGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewStreamBuffer
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferGenericCreate
</UL>

<P><STRONG><a name="[165]"></a>xStreamBufferGenericCreateStatic</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, stream_buffer.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xStreamBufferGenericCreateStatic &rArr; prvInitialiseNewStreamBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewStreamBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferGenericCreateStatic
</UL>

<P><STRONG><a name="[274]"></a>xStreamBufferGetStaticBuffers</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, stream_buffer.o(privileged_functions), UNUSED)

<P><STRONG><a name="[166]"></a>vStreamBufferDelete</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stream_buffer.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = vStreamBufferDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vStreamBufferDelete
</UL>

<P><STRONG><a name="[168]"></a>xStreamBufferReset</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, stream_buffer.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xStreamBufferReset &rArr; prvInitialiseNewStreamBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewStreamBuffer
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferReset
</UL>

<P><STRONG><a name="[125]"></a>xStreamBufferSetTriggerLevel</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stream_buffer.o(privileged_functions), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferSetTriggerLevel
</UL>

<P><STRONG><a name="[121]"></a>xStreamBufferSpacesAvailable</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stream_buffer.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xStreamBufferSpacesAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferSpacesAvailable
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferIsFull
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
</UL>

<P><STRONG><a name="[123]"></a>xStreamBufferBytesAvailable</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, stream_buffer.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xStreamBufferBytesAvailable &rArr; prvBytesInBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBytesInBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferBytesAvailable
</UL>

<P><STRONG><a name="[117]"></a>xStreamBufferSend</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, stream_buffer.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xStreamBufferSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyWait
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyStateClear
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSpacesAvailable
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteMessageToBuffer
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBytesInBuffer
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferSend
</UL>

<P><STRONG><a name="[16c]"></a>xStreamBufferSendFromISR</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, stream_buffer.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xStreamBufferSendFromISR &rArr; prvWriteMessageToBuffer &rArr; prvWriteBytesToBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSpacesAvailable
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteMessageToBuffer
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBytesInBuffer
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMask
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
</UL>

<P><STRONG><a name="[11b]"></a>xStreamBufferReceive</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, stream_buffer.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xStreamBufferReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyWait
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyStateClear
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReadMessageFromBuffer
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBytesInBuffer
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferReceive
</UL>

<P><STRONG><a name="[119]"></a>xStreamBufferNextMessageLengthBytes</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, stream_buffer.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xStreamBufferNextMessageLengthBytes &rArr; prvReadBytesFromBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReadBytesFromBuffer
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBytesInBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferNextMessageLengthBytes
</UL>

<P><STRONG><a name="[170]"></a>xStreamBufferReceiveFromISR</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, stream_buffer.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xStreamBufferReceiveFromISR &rArr; prvReadMessageFromBuffer &rArr; prvReadBytesFromBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReadMessageFromBuffer
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBytesInBuffer
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMask
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
</UL>

<P><STRONG><a name="[11f]"></a>xStreamBufferIsEmpty</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stream_buffer.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xStreamBufferIsEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferIsEmpty
</UL>

<P><STRONG><a name="[11d]"></a>xStreamBufferIsFull</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stream_buffer.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xStreamBufferIsFull &rArr; xStreamBufferSpacesAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSpacesAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferIsFull
</UL>

<P><STRONG><a name="[171]"></a>xStreamBufferSendCompletedFromISR</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, stream_buffer.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMask
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[172]"></a>xStreamBufferReceiveCompletedFromISR</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, stream_buffer.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMask
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[275]"></a>uxStreamBufferGetStreamBufferNumber</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stream_buffer.o(privileged_functions), UNUSED)

<P><STRONG><a name="[276]"></a>vStreamBufferSetStreamBufferNumber</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stream_buffer.o(privileged_functions), UNUSED)

<P><STRONG><a name="[277]"></a>ucStreamBufferGetStreamBufferType</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stream_buffer.o(privileged_functions), UNUSED)

<P><STRONG><a name="[173]"></a>xTaskCreateStatic</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; vPortStoreTaskMPUSettings
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskCreateStatic
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[17b]"></a>xTaskCreateRestrictedStatic</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, tasks.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[17c]"></a>xTaskCreateRestricted</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = xTaskCreateRestricted &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartCountingSemaphoreTasks
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCreateBlockTimeTasks
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartBlockingQueueTasks
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCreateAbortDelayTasks
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartMPUDemo
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTaskNotifyTask
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartRegisterTasks
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartStreamBufferInterruptDemo
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartStreamBufferTasks
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartSemaphoreTasks
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartRecursiveMutexTasks
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartQueueSetPollingTask
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartQueueSetTasks
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartQueueOverwriteTask
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartQueuePeekTasks
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartPolledQueueTasks
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartMessageBufferTasks
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartInterruptSemaphoreTasks
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartInterruptQueueTasks
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartIntegerMathTasks
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartGenericQueueTasks
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartMathTasks
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartEventGroupTasks
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartDynamicPriorityTasks
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTimerDemoTask
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTests
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTaskNotifyArrayTask
</UL>

<P><STRONG><a name="[17d]"></a>xTaskCreate</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, tasks.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskCreate
</UL>

<P><STRONG><a name="[17e]"></a>vTaskDelete</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelete
</UL>

<P><STRONG><a name="[b8]"></a>xTaskDelayUntil</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskDelayUntil
</UL>

<P><STRONG><a name="[12d]"></a>vTaskSuspendAll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tasks.o(privileged_functions))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueReceiveWhenSuspendedTask
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueSendWhenSuspendedTask
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCounterControlTask
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskAbortDelay
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCatchUpTicks
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetHandle
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskDelayUntil
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[12f]"></a>xTaskResumeAll</STRONG> (Thumb, 554 bytes, Stack size 40 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueReceiveWhenSuspendedTask
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueSendWhenSuspendedTask
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCounterControlTask
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskAbortDelay
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCatchUpTicks
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetHandle
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskDelayUntil
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[bd]"></a>vTaskDelay</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelay
</UL>

<P><STRONG><a name="[c1]"></a>eTaskGetState</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eTaskGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_eTaskGetState
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskAbortDelay
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>

<P><STRONG><a name="[bf]"></a>uxTaskPriorityGet</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uxTaskPriorityGet
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskPriorityGet
</UL>

<P><STRONG><a name="[186]"></a>uxTaskPriorityGetFromISR</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, tasks.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMask
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[187]"></a>vTaskPrioritySet</STRONG> (Thumb, 466 bytes, Stack size 48 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskPrioritySet &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskPrioritySet
</UL>

<P><STRONG><a name="[c5]"></a>vTaskSuspend</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskSuspend &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskSuspend
</UL>

<P><STRONG><a name="[c7]"></a>vTaskResume</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskResume &rArr; prvTaskIsTaskSuspended
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskResume
</UL>

<P><STRONG><a name="[189]"></a>vTaskStartScheduler</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; vPortStoreTaskMPUSettings
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTests
</UL>

<P><STRONG><a name="[190]"></a>vTaskEndScheduler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tasks.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEndScheduler
</UL>

<P><STRONG><a name="[185]"></a>xTaskIncrementTick</STRONG> (Thumb, 646 bytes, Stack size 48 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[c9]"></a>xTaskGetTickCount</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[278]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tasks.o(privileged_functions), UNUSED)

<P><STRONG><a name="[cb]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(privileged_functions))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskGetNumberOfTasks
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[cd]"></a>pcTaskGetName</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, tasks.o(privileged_functions), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_pcTaskGetName
</UL>

<P><STRONG><a name="[192]"></a>xTaskGetHandle</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xTaskGetHandle &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSearchForNameWithinSingleList
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetHandle
</UL>

<P><STRONG><a name="[279]"></a>xTaskGetStaticBuffers</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, tasks.o(privileged_functions), UNUSED)

<P><STRONG><a name="[cf]"></a>uxTaskGetSystemState</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, tasks.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskGetSystemState
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
</UL>

<P><STRONG><a name="[196]"></a>vTaskStepTick</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskStepTick
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[197]"></a>xTaskCatchUpTicks</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xTaskCatchUpTicks &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest7_CheckBacklogBehaviour
</UL>

<P><STRONG><a name="[bb]"></a>xTaskAbortDelay</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xTaskAbortDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskAbortDelay
</UL>

<P><STRONG><a name="[14a]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[12e]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
</UL>

<P><STRONG><a name="[15d]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[13f]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 450 bytes, Stack size 48 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[134]"></a>vTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskRemoveFromUnorderedEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>

<P><STRONG><a name="[d7]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskSetTimeOutState
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
</UL>

<P><STRONG><a name="[148]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[d9]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = xTaskCheckForTimeOut &rArr; vTaskInternalSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskCheckForTimeOut
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[155]"></a>vTaskMissedYield</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(privileged_functions))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[27a]"></a>uxTaskGetTaskNumber</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, tasks.o(privileged_functions), UNUSED)

<P><STRONG><a name="[27b]"></a>vTaskSetTaskNumber</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, tasks.o(privileged_functions), UNUSED)

<P><STRONG><a name="[23e]"></a>eTaskConfirmSleepModeStatus</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eTaskConfirmSleepModeStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[198]"></a>vTaskAllocateMPURegions</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, tasks.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortStoreTaskMPUSettings
</UL>

<P><STRONG><a name="[c3]"></a>vTaskGetInfo</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, tasks.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskCheckFreeStackSpace
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskGetInfo
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
</UL>

<P><STRONG><a name="[d1]"></a>uxTaskGetStackHighWaterMark</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, tasks.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskCheckFreeStackSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskGetStackHighWaterMark
</UL>

<P><STRONG><a name="[d3]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetCurrentTaskHandle
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[d5]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetSchedulerState
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
</UL>

<P><STRONG><a name="[14e]"></a>xTaskPriorityInherit</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskPriorityInherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[153]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[150]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 362 bytes, Stack size 48 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[19a]"></a>vTaskList</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, tasks.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteNameToBuffer
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[131]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = uxTaskResetEventItemValue
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
</UL>

<P><STRONG><a name="[14c]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tasks.o(privileged_functions))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[df]"></a>ulTaskGenericNotifyTake</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_ulTaskGenericNotifyTake
</UL>

<P><STRONG><a name="[dd]"></a>xTaskGenericNotifyWait</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xTaskGenericNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotifyWait
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
</UL>

<P><STRONG><a name="[db]"></a>xTaskGenericNotify</STRONG> (Thumb, 538 bytes, Stack size 56 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskGenericNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotify
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
</UL>

<P><STRONG><a name="[16d]"></a>xTaskGenericNotifyFromISR</STRONG> (Thumb, 644 bytes, Stack size 64 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xTaskGenericNotifyFromISR
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMask
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceiveCompletedFromISR
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendCompletedFromISR
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceiveFromISR
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
</UL>

<P><STRONG><a name="[19e]"></a>vTaskGenericNotifyGiveFromISR</STRONG> (Thumb, 470 bytes, Stack size 56 bytes, tasks.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMask
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>

<P><STRONG><a name="[e1]"></a>xTaskGenericNotifyStateClear</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskGenericNotifyStateClear
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotifyStateClear
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
</UL>

<P><STRONG><a name="[e3]"></a>ulTaskGenericNotifyValueClear</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ulTaskGenericNotifyValueClear
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_ulTaskGenericNotifyValueClear
</UL>

<P><STRONG><a name="[1b3]"></a>xTaskGetMPUSettings</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, tasks.o(privileged_functions), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortIsAuthorizedToAccessBuffer
</UL>

<P><STRONG><a name="[b5]"></a>vTaskSwitchContext</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[18b]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, timers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; vPortStoreTaskMPUSettings
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1a5]"></a>xTimerCreate</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, timers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTaskNotifyTask
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest1_CreateTimersWithoutSchedulerRunning
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTimerDemoTask
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTaskNotifyArrayTask
</UL>

<P><STRONG><a name="[1a7]"></a>xTimerCreateStatic</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, timers.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>

<P><STRONG><a name="[10d]"></a>xTimerGenericCommand</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, timers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerGenericCommand
</UL>

<P><STRONG><a name="[101]"></a>xTimerGetTimerDaemonTaskHandle</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timers.o(privileged_functions), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerGetTimerDaemonTaskHandle
</UL>

<P><STRONG><a name="[109]"></a>xTimerGetPeriod</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timers.o(privileged_functions), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerGetPeriod
</UL>

<P><STRONG><a name="[103]"></a>vTimerSetReloadMode</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, timers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTimerSetReloadMode
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTimerSetReloadMode
</UL>

<P><STRONG><a name="[1a8]"></a>xTimerGetReloadMode</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, timers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTimerGetReloadMode
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTimerGetReloadMode
</UL>

<P><STRONG><a name="[105]"></a>uxTimerGetReloadMode</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, timers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uxTimerGetReloadMode &rArr; xTimerGetReloadMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGetReloadMode
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTimerGetReloadMode
</UL>

<P><STRONG><a name="[10b]"></a>xTimerGetExpiryTime</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, timers.o(privileged_functions), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerGetExpiryTime
</UL>

<P><STRONG><a name="[27c]"></a>xTimerGetStaticBuffer</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, timers.o(privileged_functions), UNUSED)

<P><STRONG><a name="[107]"></a>pcTimerGetName</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pcTimerGetName
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_pcTimerGetName
</UL>

<P><STRONG><a name="[ff]"></a>xTimerIsTimerActive</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, timers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTimerIsTimerActive
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerIsTimerActive
</UL>

<P><STRONG><a name="[fb]"></a>pvTimerGetTimerID</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, timers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pvTimerGetTimerID
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_pvTimerGetTimerID
</UL>

<P><STRONG><a name="[fd]"></a>vTimerSetTimerID</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, timers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTimerSetTimerID
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTimerSetTimerID
</UL>

<P><STRONG><a name="[137]"></a>xTimerPendFunctionCallFromISR</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, timers.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBitsFromISR
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBitsFromISR
</UL>

<P><STRONG><a name="[1a9]"></a>xTimerPendFunctionCall</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, timers.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[27d]"></a>uxTimerGetTimerNumber</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, timers.o(privileged_functions), UNUSED)

<P><STRONG><a name="[27e]"></a>vTimerSetTimerNumber</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timers.o(privileged_functions), UNUSED)

<P><STRONG><a name="[1b0]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, port.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortSetupTimerInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[130]"></a>vPortYield</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, port.o(privileged_functions))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskGenericNotifyTake
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskDelayUntil
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyWait
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSemaphoreTest
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv2ndHigherPriorityNormallyFullTask
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv1stHigherPriorityNormallyFullTask
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHigherPriorityNormallyEmptyTask
</UL>

<P><STRONG><a name="[132]"></a>vPortEnterCritical</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(privileged_functions))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCounterControlTask
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerSetTimerID
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGetReloadMode
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerSetReloadMode
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskGenericNotifyValueClear
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskGenericNotifyTake
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskAbortDelay
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCatchUpTicks
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyWait
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyStateClear
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReset
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueRemoveFromSet
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueAddToSet
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGetMutexHolder
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockOnNotificationsComingFromInterrupts
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyingTimer
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInterruptTriggerLevelTest
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSemaphoreTest
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSetReceivingTask
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPolledQueueProducer
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPolledQueueConsumer
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv2ndHigherPriorityNormallyFullTask
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv1stHigherPriorityNormallyFullTask
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLowerPriorityNormallyEmptyTask
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCompeteingIntMathTask
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest4_CheckAutoReloadTimersCanBeStopped
</UL>

<P><STRONG><a name="[133]"></a>vPortExitCritical</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, port.o(privileged_functions))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCounterControlTask
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerSetTimerID
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGetReloadMode
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerSetReloadMode
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskGenericNotifyValueClear
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskGenericNotifyTake
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskAbortDelay
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCatchUpTicks
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyWait
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyStateClear
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReset
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueRemoveFromSet
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueAddToSet
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGetMutexHolder
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockOnNotificationsComingFromInterrupts
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyingTimer
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInterruptTriggerLevelTest
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSemaphoreTest
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSetReceivingTask
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPolledQueueProducer
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPolledQueueConsumer
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv2ndHigherPriorityNormallyFullTask
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv1stHigherPriorityNormallyFullTask
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLowerPriorityNormallyEmptyTask
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCompeteingIntMathTask
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest4_CheckAutoReloadTimersCanBeStopped
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, port.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMask
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[179]"></a>pxPortInitialiseStack</STRONG> (Thumb, 508 bytes, Stack size 28 bytes, port.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[18c]"></a>xPortStartScheduler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, port.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xPortStartScheduler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartFirstTask
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupMPU
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[191]"></a>vPortEndScheduler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(privileged_functions), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEndScheduler
</UL>

<P><STRONG><a name="[178]"></a>vPortStoreTaskMPUSettings</STRONG> (Thumb, 434 bytes, Stack size 40 bytes, port.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vPortStoreTaskMPUSettings
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskAllocateMPURegions
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1b2]"></a>xPortIsAuthorizedToAccessBuffer</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, port.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetRegionAccessPermissions
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetMPUSettings
</UL>

<P><STRONG><a name="[5d]"></a>vPortSVCHandler_C</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, port.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vPortSVCHandler_C
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRaisePrivilege
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRestoreContextOfFirstTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> portasm.o(privileged_functions)
</UL>
<P><STRONG><a name="[1b5]"></a>vRestoreContextOfFirstTask</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, portasm.o(privileged_functions))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSVCHandler_C
</UL>

<P><STRONG><a name="[1b6]"></a>vRaisePrivilege</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, portasm.o(privileged_functions))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSVCHandler_C
</UL>

<P><STRONG><a name="[1b1]"></a>vStartFirstTask</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, portasm.o(privileged_functions))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[139]"></a>ulSetInterruptMask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, portasm.o(privileged_functions))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGenericNotifyGiveFromISR
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGetFromISR
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceiveCompletedFromISR
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendCompletedFromISR
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceiveFromISR
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupGetBitsFromISR
</UL>

<P><STRONG><a name="[13a]"></a>vClearInterruptMask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, portasm.o(privileged_functions))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGenericNotifyGiveFromISR
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGetFromISR
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceiveCompletedFromISR
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendCompletedFromISR
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceiveFromISR
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupGetBitsFromISR
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, portasm.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, portasm.o(privileged_functions))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[12c]"></a>pvPortMalloc</STRONG> (Thumb, 456 bytes, Stack size 40 bytes, heap_4.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortCalloc
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>

<P><STRONG><a name="[13c]"></a>vPortFree</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, heap_4.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStreamBufferDelete
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
</UL>

<P><STRONG><a name="[27f]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, heap_4.o(privileged_functions), UNUSED)

<P><STRONG><a name="[280]"></a>xPortGetMinimumEverFreeHeapSize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, heap_4.o(privileged_functions), UNUSED)

<P><STRONG><a name="[281]"></a>vPortInitialiseBlocks</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heap_4.o(privileged_functions), UNUSED)

<P><STRONG><a name="[1b9]"></a>pvPortCalloc</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, heap_4.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1ba]"></a>MPU_xTaskCreate</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, mpu_wrappers.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1bb]"></a>MPU_xTaskCreateStatic</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, mpu_wrappers.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[1bc]"></a>MPU_vTaskDelete</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mpu_wrappers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MPU_vTaskDelete &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRegTest2_Task
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRegTest1_Task
</UL>

<P><STRONG><a name="[1bd]"></a>MPU_vTaskPrioritySet</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu_wrappers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MPU_vTaskPrioritySet &rArr; vTaskPrioritySet &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vContinuousIncrementTask
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBasicDelayTests
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPrimaryBlockTimeTestTask
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvControllingTask
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestNotifyTaskWhileSuspended
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifiedTask
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvChangeRelativePriorities
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInterruptCountingSemaphoreTask
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLowerPriorityNormallyFullTask
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLowerPriorityNormallyEmptyTask
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTakeTwoMutexesReturnInDifferentOrder
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPerformTaskSyncTests
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest7_CheckBacklogBehaviour
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest3_CheckAutoReloadExpireRates
</UL>

<P><STRONG><a name="[1be]"></a>MPU_xTaskGetHandle</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu_wrappers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MPU_xTaskGetHandle &rArr; xTaskGetHandle &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockingTask
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvControllingTask
</UL>

<P><STRONG><a name="[1bf]"></a>MPU_xQueueGenericCreate</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, mpu_wrappers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MPU_xQueueGenericCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCreateBlockTimeTasks
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartBlockingQueueTasks
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartSemaphoreTasks
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartQueueSetPollingTask
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestQueueOverwriteOnTwoQueusInQueueSet
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestQueueOverwriteWithQueueSet
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTest
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartQueueOverwriteTask
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueOverwriteTask
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartQueuePeekTasks
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartPolledQueueTasks
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartInterruptQueueTasks
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartGenericQueueTasks
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartDynamicPriorityTasks
</UL>

<P><STRONG><a name="[1c0]"></a>MPU_xQueueGenericCreateStatic</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, mpu_wrappers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MPU_xQueueGenericCreateStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingQueueSend
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingSemaphoreTake
</UL>

<P><STRONG><a name="[1c1]"></a>MPU_xQueueGenericReset</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mpu_wrappers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MPU_xQueueGenericReset &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTakeAndGiveInTheOppositeOrder
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTakeAndGiveInTheSameOrder
</UL>

<P><STRONG><a name="[1c2]"></a>MPU_xQueueCreateMutex</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mpu_wrappers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = MPU_xQueueCreateMutex &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartRecursiveMutexTasks
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartInterruptSemaphoreTasks
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartGenericQueueTasks
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLowPriorityMutexTask
</UL>

<P><STRONG><a name="[1c3]"></a>MPU_xQueueCreateMutexStatic</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, mpu_wrappers.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
</UL>

<P><STRONG><a name="[1c4]"></a>MPU_xQueueCreateCountingSemaphore</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mpu_wrappers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MPU_xQueueCreateCountingSemaphore &rArr; xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartCountingSemaphoreTasks
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartInterruptSemaphoreTasks
</UL>

<P><STRONG><a name="[1c5]"></a>MPU_xQueueCreateCountingSemaphoreStatic</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, mpu_wrappers.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
</UL>

<P><STRONG><a name="[1c6]"></a>MPU_xQueueCreateSet</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu_wrappers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MPU_xQueueCreateSet &rArr; xQueueCreateSet &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartQueueSetPollingTask
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTest
</UL>

<P><STRONG><a name="[1c7]"></a>MPU_xQueueRemoveFromSet</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mpu_wrappers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MPU_xQueueRemoveFromSet &rArr; xQueueRemoveFromSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueRemoveFromSet
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestQueueOverwriteOnTwoQueusInQueueSet
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestQueueOverwriteWithQueueSet
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTest
</UL>

<P><STRONG><a name="[1c8]"></a>MPU_vQueueDelete</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mpu_wrappers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MPU_vQueueDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingQueueSend
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingSemaphoreTake
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestQueueOverwriteOnTwoQueusInQueueSet
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestQueueOverwriteWithQueueSet
</UL>

<P><STRONG><a name="[1c9]"></a>MPU_xEventGroupCreate</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mpu_wrappers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MPU_xEventGroupCreate &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartEventGroupTasks
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestMasterTask
</UL>

<P><STRONG><a name="[1ca]"></a>MPU_xEventGroupCreateStatic</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu_wrappers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MPU_xEventGroupCreateStatic &rArr; xEventGroupCreateStatic &rArr; vListInitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingEventGroupWait
</UL>

<P><STRONG><a name="[1cb]"></a>MPU_vEventGroupDelete</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mpu_wrappers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MPU_vEventGroupDelete &rArr; vEventGroupDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingEventGroupWait
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSelectiveBitsTestMasterFunction
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestMasterTask
</UL>

<P><STRONG><a name="[1cc]"></a>MPU_vStreamBufferDelete</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mpu_wrappers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MPU_vStreamBufferDelete &rArr; vStreamBufferDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStreamBufferDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingStreamBufferReceive
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSenderTask
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoClient
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInterruptTriggerLevelTest
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSenderTask
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoServer
</UL>

<P><STRONG><a name="[1cd]"></a>MPU_xStreamBufferReset</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu_wrappers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MPU_xStreamBufferReset &rArr; xStreamBufferReset &rArr; prvInitialiseNewStreamBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReset
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSenderTask
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
</UL>

<P><STRONG><a name="[1ce]"></a>MPU_xStreamBufferGenericCreate</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, mpu_wrappers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MPU_xStreamBufferGenericCreate &rArr; xStreamBufferGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartStreamBufferInterruptDemo
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartStreamBufferTasks
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoClient
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInterruptTriggerLevelTest
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartMessageBufferTasks
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoServer
</UL>

<P><STRONG><a name="[1cf]"></a>MPU_xStreamBufferGenericCreateStatic</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, mpu_wrappers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MPU_xStreamBufferGenericCreateStatic &rArr; xStreamBufferGenericCreateStatic &rArr; prvInitialiseNewStreamBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingStreamBufferReceive
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartStreamBufferTasks
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSenderTask
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartMessageBufferTasks
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSenderTask
</UL>

<P><STRONG><a name="[b6]"></a>MPU_xTaskDelayUntil</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MPU_xTaskDelayUntil &rArr; xTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskDelayUntil
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBasicDelayTests
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingTaskDelayUntil
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xAreRegisterTasksStillRunning
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTask
</UL>

<P><STRONG><a name="[ba]"></a>MPU_xTaskAbortDelay</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MPU_xTaskAbortDelay &rArr; xTaskAbortDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskAbortDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPerformSingleTaskTests
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvControllingTask
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHighPriorityTimeout
</UL>

<P><STRONG><a name="[bc]"></a>MPU_vTaskDelay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MPU_vTaskDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueSendWhenSuspendedTask
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCounterControlTask
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBasicDelayTests
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPrimaryBlockTimeTestTask
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingTaskDelay
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvControllingTask
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRWAccessTask
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvROAccessTask
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSenderTask
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInterruptTriggerLevelTest
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSemaphoreTest
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRecursiveMutexControllingTask
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvChangeRelativePriorities
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLowPriorityPeekTask
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPolledQueueProducer
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPolledQueueConsumer
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSenderTask
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInterruptCountingSemaphoreTask
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInterruptMutexMasterTask
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv1stHigherPriorityNormallyFullTask
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHighPriorityTimeout
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest6_CheckAutoReloadResetBehaviour
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest5_CheckBasicOneShotTimerBehaviour
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest4_CheckAutoReloadTimersCanBeStopped
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest3_CheckAutoReloadExpireRates
</UL>

<P><STRONG><a name="[be]"></a>MPU_uxTaskPriorityGet</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MPU_uxTaskPriorityGet &rArr; uxTaskPriorityGet
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vContinuousIncrementTask
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSenderTask
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoClient
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoServer
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRecursiveMutexPollingTask
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSetReceivingTask
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSenderTask
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoClient
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoServer
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTakeAndGiveInTheOppositeOrder
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTakeAndGiveInTheSameOrder
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHighPriorityTimeout
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTakeTwoMutexesReturnInSameOrder
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTakeTwoMutexesReturnInDifferentOrder
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest7_CheckBacklogBehaviour
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest3_CheckAutoReloadExpireRates
</UL>

<P><STRONG><a name="[c0]"></a>MPU_eTaskGetState</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MPU_eTaskGetState &rArr; eTaskGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCounterControlTask
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSuspendedTaskTimerTestCallback
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSuspendedTaskTimerTestCallback
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRecursiveMutexPollingTask
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTakeAndGiveInTheOppositeOrder
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTakeAndGiveInTheSameOrder
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLowerPriorityNormallyFullTask
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLowerPriorityNormallyEmptyTask
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTakeTwoMutexesReturnInSameOrder
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTakeTwoMutexesReturnInDifferentOrder
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPerformTaskSyncTests
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBitCombinationTestMasterFunction
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSelectiveBitsTestMasterFunction
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestMasterTask
</UL>

<P><STRONG><a name="[c2]"></a>MPU_vTaskGetInfo</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, mpu_wrappers.o(freertos_system_calls), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>

<P><STRONG><a name="[c4]"></a>MPU_vTaskSuspend</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MPU_vTaskSuspend &rArr; vTaskSuspend &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCounterControlTask
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLimitedIncrementTask
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSecondaryBlockTimeTestTask
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSuspendedTaskTimerTestCallback
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSuspendedTaskTimerTestCallback
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartStreamBufferTasks
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRecursiveMutexBlockingTask
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRecursiveMutexControllingTask
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartQueueSetTasks
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHighestPriorityPeekTask
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHighPriorityPeekTask
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMediumPriorityPeekTask
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartMessageBufferTasks
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInterruptMutexSlaveTask
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv1stHigherPriorityNormallyFullTask
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHigherPriorityNormallyEmptyTask
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMediumPriorityMutexTask
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHighPriorityMutexTask
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSelectiveBitsTestSlaveFunction
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSyncTask
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestSlaveTask
</UL>

<P><STRONG><a name="[c6]"></a>MPU_vTaskResume</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MPU_vTaskResume &rArr; vTaskResume &rArr; prvTaskIsTaskSuspended
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCounterControlTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPrimaryBlockTimeTestTask
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSuspendedTaskTimerTestCallback
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSuspendedTaskTimerTestCallback
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSenderTask
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoServer
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRecursiveMutexPollingTask
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTest
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLowPriorityPeekTask
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSenderTask
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoServer
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTakeAndGiveInTheOppositeOrder
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTakeAndGiveInTheSameOrder
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLowerPriorityNormallyFullTask
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv1stHigherPriorityNormallyFullTask
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLowerPriorityNormallyEmptyTask
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHigherPriorityNormallyEmptyTask
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHighPriorityTimeout
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTakeTwoMutexesReturnInSameOrder
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTakeTwoMutexesReturnInDifferentOrder
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPerformTaskSyncTests
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBitCombinationTestMasterFunction
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSelectiveBitsTestMasterFunction
</UL>

<P><STRONG><a name="[c8]"></a>MPU_xTaskGetTickCount</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MPU_xTaskGetTickCount &rArr; xTaskGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBasicDelayTests
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSecondaryBlockTimeTestTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPrimaryBlockTimeTestTask
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingStreamBufferReceive
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingQueueSend
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingEventGroupWait
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingSemaphoreTake
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingTaskDelayUntil
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingTaskDelay
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingTaskNotifyTake
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingTaskNotifyWait
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckExpectedTimeIsWithinAnAcceptableMargin
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvControllingTask
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockOnANonNotifiedIndexed
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockOnTheNotifiedIndexed
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestNotifyTaskWhileSuspended
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xAreRegisterTasksStillRunning
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoServer
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoServer
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetStartConditionsForNextIteration
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest7_CheckBacklogBehaviour
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest6_CheckAutoReloadResetBehaviour
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest5_CheckBasicOneShotTimerBehaviour
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest1_CreateTimersWithoutSchedulerRunning
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTask
</UL>

<P><STRONG><a name="[ca]"></a>MPU_uxTaskGetNumberOfTasks</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
</UL>

<P><STRONG><a name="[cc]"></a>MPU_pcTaskGetName</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcTaskGetName
</UL>

<P><STRONG><a name="[ce]"></a>MPU_uxTaskGetSystemState</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, mpu_wrappers.o(freertos_system_calls), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
</UL>

<P><STRONG><a name="[d0]"></a>MPU_uxTaskGetStackHighWaterMark</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
</UL>

<P><STRONG><a name="[d2]"></a>MPU_xTaskGetCurrentTaskHandle</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MPU_xTaskGetCurrentTaskHandle &rArr; xTaskGetCurrentTaskHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPerformSingleTaskTests
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHighPriorityTimeout
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSelectiveBitsTestSlaveFunction
</UL>

<P><STRONG><a name="[d4]"></a>MPU_xTaskGetSchedulerState</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>

<P><STRONG><a name="[d6]"></a>MPU_vTaskSetTimeOutState</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
</UL>

<P><STRONG><a name="[d8]"></a>MPU_xTaskCheckForTimeOut</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mpu_wrappers.o(freertos_system_calls), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[da]"></a>MPU_xTaskGenericNotify</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MPU_xTaskGenericNotify &rArr; xTaskGenericNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockingTask
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvControllingTask
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockOnNotificationsComingFromInterrupts
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockOnTheNotifiedIndexed
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyingTimerCallback
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSuspendedTaskTimerTestCallback
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSuspendedTaskTimerTestCallback
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyingTimer
</UL>

<P><STRONG><a name="[dc]"></a>MPU_xTaskGenericNotifyWait</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MPU_xTaskGenericNotifyWait &rArr; xTaskGenericNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyWait
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingTaskNotifyWait
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockingTask
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockOnNotificationsComingFromInterrupts
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockOnANonNotifiedIndexed
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockOnTheNotifiedIndexed
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestNotifyTaskWhileSuspended
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
</UL>

<P><STRONG><a name="[de]"></a>MPU_ulTaskGenericNotifyTake</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MPU_ulTaskGenericNotifyTake &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskGenericNotifyTake
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingTaskNotifyTake
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvControllingTask
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockOnNotificationsComingFromInterrupts
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockOnTheNotifiedIndexed
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifiedTask
</UL>

<P><STRONG><a name="[e0]"></a>MPU_xTaskGenericNotifyStateClear</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MPU_xTaskGenericNotifyStateClear &rArr; xTaskGenericNotifyStateClear
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyStateClear
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockOnNotificationsComingFromInterrupts
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockOnTheNotifiedIndexed
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
</UL>

<P><STRONG><a name="[e2]"></a>MPU_ulTaskGenericNotifyValueClear</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MPU_ulTaskGenericNotifyValueClear &rArr; ulTaskGenericNotifyValueClear
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskGenericNotifyValueClear
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockOnANonNotifiedIndexed
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
</UL>

<P><STRONG><a name="[e4]"></a>MPU_xQueueGenericSend</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MPU_xQueueGenericSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueSendWhenSuspendedTask
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIncrementSemaphoreCount
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDecrementSemaphoreCount
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSecondaryBlockTimeTestTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPrimaryBlockTimeTestTask
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBlockingQueueProducer
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingQueueSend
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartSemaphoreTasks
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSemaphoreTest
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestQueueOverwriteOnTwoQueusInQueueSet
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestQueueOverwriteWithQueueSet
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTest
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSetSendingTask
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueOverwriteTask
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLowPriorityPeekTask
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPolledQueueProducer
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTakeAndGiveInTheOppositeOrder
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTakeAndGiveInTheSameOrder
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInterruptMutexSlaveTask
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLowerPriorityNormallyFullTask
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv2ndHigherPriorityNormallyFullTask
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv1stHigherPriorityNormallyFullTask
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLowerPriorityNormallyEmptyTask
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHighPriorityTimeout
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTakeTwoMutexesReturnInSameOrder
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTakeTwoMutexesReturnInDifferentOrder
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHighPriorityMutexTask
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendFrontAndBackTest
</UL>

<P><STRONG><a name="[e6]"></a>MPU_uxQueueMessagesWaiting</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MPU_uxQueueMessagesWaiting &rArr; uxQueueMessagesWaiting
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIncrementSemaphoreCount
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDecrementSemaphoreCount
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestQueueOverwriteOnTwoQueusInQueueSet
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestQueueOverwriteWithQueueSet
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueOverwriteTask
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLowPriorityPeekTask
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHighestPriorityPeekTask
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHighPriorityPeekTask
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMediumPriorityPeekTask
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPolledQueueConsumer
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInterruptCountingSemaphoreTask
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendFrontAndBackTest
</UL>

<P><STRONG><a name="[e8]"></a>MPU_uxQueueSpacesAvailable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MPU_uxQueueSpacesAvailable &rArr; uxQueueSpacesAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInterruptCountingSemaphoreTask
</UL>

<P><STRONG><a name="[ea]"></a>MPU_xQueueReceive</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MPU_xQueueReceive &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueReceiveWhenSuspendedTask
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSecondaryBlockTimeTestTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPrimaryBlockTimeTestTask
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBlockingQueueConsumer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSetReceivingTask
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestQueueOverwriteOnTwoQueusInQueueSet
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestQueueOverwriteWithQueueSet
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTest
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSetReceivingTask
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueOverwriteTask
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLowPriorityPeekTask
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHighestPriorityPeekTask
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHighPriorityPeekTask
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPolledQueueConsumer
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLowerPriorityNormallyFullTask
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLowerPriorityNormallyEmptyTask
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHigherPriorityNormallyEmptyTask
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendFrontAndBackTest
</UL>

<P><STRONG><a name="[ec]"></a>MPU_xQueuePeek</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MPU_xQueuePeek &rArr; xQueuePeek &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestQueueOverwriteOnTwoQueusInQueueSet
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestQueueOverwriteWithQueueSet
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueOverwriteTask
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLowPriorityPeekTask
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHighestPriorityPeekTask
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHighPriorityPeekTask
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvMediumPriorityPeekTask
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendFrontAndBackTest
</UL>

<P><STRONG><a name="[ee]"></a>MPU_xQueueSemaphoreTake</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MPU_xQueueSemaphoreTake &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIncrementSemaphoreCount
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDecrementSemaphoreCount
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCountingSemaphoreTask
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingSemaphoreTake
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSemaphoreTest
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInterruptCountingSemaphoreTask
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTakeAndGiveInTheOppositeOrder
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTakeAndGiveInTheSameOrder
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInterruptMutexSlaveTask
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHighPriorityTimeout
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTakeTwoMutexesReturnInSameOrder
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTakeTwoMutexesReturnInDifferentOrder
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHighPriorityMutexTask
</UL>

<P><STRONG><a name="[f0]"></a>MPU_xQueueGetMutexHolder</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MPU_xQueueGetMutexHolder &rArr; xQueueGetMutexHolder
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGetMutexHolder
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHighPriorityTimeout
</UL>

<P><STRONG><a name="[f2]"></a>MPU_xQueueTakeMutexRecursive</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = MPU_xQueueTakeMutexRecursive &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRecursiveMutexPollingTask
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRecursiveMutexBlockingTask
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRecursiveMutexControllingTask
</UL>

<P><STRONG><a name="[f4]"></a>MPU_xQueueGiveMutexRecursive</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = MPU_xQueueGiveMutexRecursive &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRecursiveMutexPollingTask
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRecursiveMutexBlockingTask
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRecursiveMutexControllingTask
</UL>

<P><STRONG><a name="[f6]"></a>MPU_xQueueSelectFromSet</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = MPU_xQueueSelectFromSet &rArr; xQueueSelectFromSet &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSelectFromSet
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSetReceivingTask
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestQueueOverwriteOnTwoQueusInQueueSet
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestQueueOverwriteWithQueueSet
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTest
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSetReceivingTask
</UL>

<P><STRONG><a name="[f8]"></a>MPU_xQueueAddToSet</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MPU_xQueueAddToSet &rArr; xQueueAddToSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueAddToSet
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartQueueSetPollingTask
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestQueueOverwriteOnTwoQueusInQueueSet
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestQueueOverwriteWithQueueSet
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTest
</UL>

<P><STRONG><a name="[fa]"></a>MPU_pvTimerGetTimerID</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MPU_pvTimerGetTimerID &rArr; pvTimerGetTimerID
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAutoReloadTimerCallback
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvOneShotTimerCallback
</UL>

<P><STRONG><a name="[fc]"></a>MPU_vTimerSetTimerID</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MPU_vTimerSetTimerID &rArr; vTimerSetTimerID
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerSetTimerID
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvOneShotTimerCallback
</UL>

<P><STRONG><a name="[fe]"></a>MPU_xTimerIsTimerActive</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MPU_xTimerIsTimerActive &rArr; xTimerIsTimerActive
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetStartConditionsForNextIteration
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest7_CheckBacklogBehaviour
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest6_CheckAutoReloadResetBehaviour
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest5_CheckBasicOneShotTimerBehaviour
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest4_CheckAutoReloadTimersCanBeStopped
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest2_CheckTaskAndTimersInitialState
</UL>

<P><STRONG><a name="[100]"></a>MPU_xTimerGetTimerDaemonTaskHandle</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGetTimerDaemonTaskHandle
</UL>

<P><STRONG><a name="[102]"></a>MPU_vTimerSetReloadMode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MPU_vTimerSetReloadMode &rArr; vTimerSetReloadMode
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerSetReloadMode
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTestTask
</UL>

<P><STRONG><a name="[104]"></a>MPU_uxTimerGetReloadMode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MPU_uxTimerGetReloadMode &rArr; uxTimerGetReloadMode &rArr; xTimerGetReloadMode
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTimerGetReloadMode
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTestTask
</UL>

<P><STRONG><a name="[106]"></a>MPU_pcTimerGetName</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MPU_pcTimerGetName &rArr; pcTimerGetName
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcTimerGetName
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest1_CreateTimersWithoutSchedulerRunning
</UL>

<P><STRONG><a name="[108]"></a>MPU_xTimerGetPeriod</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGetPeriod
</UL>

<P><STRONG><a name="[10a]"></a>MPU_xTimerGetExpiryTime</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGetExpiryTime
</UL>

<P><STRONG><a name="[10c]"></a>MPU_xTimerGenericCommand</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = MPU_xTimerGenericCommand &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockOnANonNotifiedIndexed
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockOnTheNotifiedIndexed
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestNotifyTaskWhileSuspended
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifiedTask
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAutoReloadTimerCallback
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetStartConditionsForNextIteration
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest7_CheckBacklogBehaviour
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest6_CheckAutoReloadResetBehaviour
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest5_CheckBasicOneShotTimerBehaviour
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest4_CheckAutoReloadTimersCanBeStopped
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest1_CreateTimersWithoutSchedulerRunning
</UL>

<P><STRONG><a name="[10e]"></a>MPU_xEventGroupWaitBits</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MPU_xEventGroupWaitBits &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingEventGroupWait
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSelectiveBitsTestSlaveFunction
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSyncTask
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBitCombinationTestMasterFunction
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestSlaveTask
</UL>

<P><STRONG><a name="[110]"></a>MPU_xEventGroupClearBits</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MPU_xEventGroupClearBits &rArr; xEventGroupClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPerformTaskSyncTests
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBitCombinationTestMasterFunction
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestSlaveTask
</UL>

<P><STRONG><a name="[112]"></a>MPU_xEventGroupSetBits</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MPU_xEventGroupSetBits &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPerformTaskSyncTests
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBitCombinationTestMasterFunction
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSelectiveBitsTestMasterFunction
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestSlaveTask
</UL>

<P><STRONG><a name="[114]"></a>MPU_xEventGroupSync</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MPU_xEventGroupSync &rArr; xEventGroupSync &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSyncTask
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPerformTaskSyncTests
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestSlaveTask
</UL>

<P><STRONG><a name="[116]"></a>MPU_xStreamBufferSend</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MPU_xStreamBufferSend &rArr; xStreamBufferSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSenderTask
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoClient
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNonBlockingSenderTask
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoServer
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSpaceAvailableCoherenceActor
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSenderTask
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoClient
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNonBlockingSenderTask
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoServer
</UL>

<P><STRONG><a name="[118]"></a>MPU_xStreamBufferNextMessageLengthBytes</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MPU_xStreamBufferNextMessageLengthBytes &rArr; xStreamBufferNextMessageLengthBytes &rArr; prvReadBytesFromBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferNextMessageLengthBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
</UL>

<P><STRONG><a name="[11a]"></a>MPU_xStreamBufferReceive</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MPU_xStreamBufferReceive &rArr; xStreamBufferReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingStreamBufferReceive
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReceivingTask
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReceiverTask
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoClient
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInterruptTriggerLevelTest
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNonBlockingReceiverTask
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoServer
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSpaceAvailableCoherenceActor
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReceiverTask
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoClient
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNonBlockingReceiverTask
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoServer
</UL>

<P><STRONG><a name="[11c]"></a>MPU_xStreamBufferIsFull</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MPU_xStreamBufferIsFull &rArr; xStreamBufferIsFull &rArr; xStreamBufferSpacesAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferIsFull
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
</UL>

<P><STRONG><a name="[11e]"></a>MPU_xStreamBufferIsEmpty</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MPU_xStreamBufferIsEmpty &rArr; xStreamBufferIsEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferIsEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
</UL>

<P><STRONG><a name="[120]"></a>MPU_xStreamBufferSpacesAvailable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MPU_xStreamBufferSpacesAvailable &rArr; xStreamBufferSpacesAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSpacesAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSpaceAvailableCoherenceTester
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSpaceAvailableCoherenceActor
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
</UL>

<P><STRONG><a name="[122]"></a>MPU_xStreamBufferBytesAvailable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu_wrappers.o(freertos_system_calls))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MPU_xStreamBufferBytesAvailable &rArr; xStreamBufferBytesAvailable &rArr; prvBytesInBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferBytesAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
</UL>

<P><STRONG><a name="[124]"></a>MPU_xStreamBufferSetTriggerLevel</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mpu_wrappers.o(freertos_system_calls), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetPrivilege
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsPrivileged
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSetTriggerLevel
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[1d0]"></a>ProcessHardFaultx</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m2351.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHardFaultx
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHardFaultx
</UL>

<P><STRONG><a name="[32]"></a>ACMP01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP01_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP01_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>BPWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>BPWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>BRAKE0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>BRAKE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[282]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>CLKFAIL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CRPT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DEFAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>ECAP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>ECAP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EINT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>EINT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>EINT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EPWM0_P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EPWM0_P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EPWM0_P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EPWM1_P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EPWM1_P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EPWM1_P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>GPA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>GPB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>GPC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>GPD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>GPE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>GPF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>GPG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>GPH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2S0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>IRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>OPA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PDMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>PDMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>QEI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>QEI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>QSPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[283]"></a>SC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>SCU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SDH0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[284]"></a>SDH1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text), UNUSED)

<P><STRONG><a name="[1d]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SRAM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USBH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USBOTG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>USCI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>USCI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2351.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[285]"></a>SH_DoCommand</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_m2351.o(.text), UNUSED)

<P><STRONG><a name="[286]"></a>__PC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_m2351.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReadBytesFromBuffer
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteBytesToBuffer
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[287]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[288]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewStreamBuffer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[176]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[289]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortCalloc
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestrictedStatic
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewStreamBuffer
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoClient
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoServer
</UL>

<P><STRONG><a name="[167]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCreateBlockTimeTasks
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStreamBufferDelete
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartQueuePeekTasks
</UL>

<P><STRONG><a name="[1e6]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv1stHigherPriorityNormallyFullTask
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHigherPriorityNormallyEmptyTask
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTimerDemoTask
</UL>

<P><STRONG><a name="[1d1]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[193]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetHandle
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteNameToBuffer
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReceivingTask
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReceiverTask
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSenderTask
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNonBlockingSenderTask
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNonBlockingReceiverTask
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSpaceAvailableCoherenceActor
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSenderTask
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNonBlockingSenderTask
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNonBlockingReceiverTask
</UL>

<P><STRONG><a name="[216]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReceivingTask
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoClient
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSpaceAvailableCoherenceActor
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReceiverTask
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoClient
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNonBlockingReceiverTask
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest1_CreateTimersWithoutSchedulerRunning
</UL>

<P><STRONG><a name="[21e]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReceiverTask
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInterruptTriggerLevelTest
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNonBlockingReceiverTask
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
</UL>

<P><STRONG><a name="[19d]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteNameToBuffer
</UL>

<P><STRONG><a name="[1d2]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCompetingMathTask4
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCompetingMathTask3
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCompetingMathTask1
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1d7]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCompetingMathTask4
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCompetingMathTask3
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCompetingMathTask2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCompetingMathTask1
</UL>

<P><STRONG><a name="[1d8]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1d9]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCompetingMathTask4
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCompetingMathTask2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCompetingMathTask1
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1da]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCompetingMathTask2
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[23b]"></a>__aeabi_dcmple</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dcmple.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCompetingMathTask4
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCompetingMathTask3
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCompetingMathTask2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCompetingMathTask1
</UL>

<P><STRONG><a name="[1db]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCompetingMathTask4
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCompetingMathTask3
</UL>

<P><STRONG><a name="[1dc]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1d3]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[28a]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[28b]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1d5]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1df]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[25b]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[28d]"></a>__aeabi_uidiv$div0</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1dd]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[28e]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[290]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>GPIO_SetMode</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, gpio.o(.text.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartRegisterTasks
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>ProcessHardFault</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, retarget.o(.text.ProcessHardFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProcessHardFault
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>SH_Return</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, retarget.o(.text.SH_Return))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SH_Return
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(.text)
</UL>
<P><STRONG><a name="[1e0]"></a>SendChar</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, retarget.o(.text.SendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SendChar &rArr; SendChar_ToUART
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1e1]"></a>SendChar_ToUART</STRONG> (Thumb, 88 bytes, Stack size 4 bytes, retarget.o(.text.SendChar_ToUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[5e]"></a>SystemInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, system_m2351.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2351.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, retarget.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fputc &rArr; SendChar &rArr; SendChar_ToUART
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[57]"></a>main</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = main &rArr; prvCreateTasks &rArr; vStartTests &rArr; vStartMessageBufferTasks &rArr; MPU_xStreamBufferGenericCreate &rArr; xStreamBufferGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreateTasks
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[18a]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, main.o(.text.vApplicationGetIdleTaskMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vApplicationGetIdleTaskMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1a1]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, main.o(.text.vApplicationGetTimerTaskMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vApplicationGetTimerTaskMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[19f]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(.text.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[23c]"></a>vCreateAbortDelayTasks</STRONG> (Thumb, 174 bytes, Stack size 160 bytes, abortdelay.o(.text.vCreateAbortDelayTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = vCreateAbortDelayTasks &rArr; xTaskCreateRestricted &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTests
</UL>

<P><STRONG><a name="[23d]"></a>vCreateBlockTimeTasks</STRONG> (Thumb, 228 bytes, Stack size 168 bytes, blocktim.o(.text.vCreateBlockTimeTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = vCreateBlockTimeTasks &rArr; MPU_xQueueGenericCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericCreate
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTests
</UL>

<P><STRONG><a name="[62]"></a>vHandleMemoryFault</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, mpu_demo.o(.text.vHandleMemoryFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vHandleMemoryFault
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.HardFault_Handler)
</UL>
<P><STRONG><a name="[21c]"></a>vInitialiseTimerForIntQueueTest</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, intqueuetimer.o(.text.vInitialiseTimerForIntQueueTest))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHigherPriorityNormallyEmptyTask
</UL>

<P><STRONG><a name="[18f]"></a>vPortSuppressTicksAndSleep</STRONG> (Thumb, 544 bytes, Stack size 40 bytes, port.o(.text.vPortSuppressTicksAndSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortSuppressTicksAndSleep &rArr; vTaskStepTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskConfirmSleepModeStatus
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[229]"></a>vRegTest1Asm_NonSecure</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, reg_test_asm.o(.text.vRegTest1Asm_NonSecure))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRegTest1_Task
</UL>

<P><STRONG><a name="[22a]"></a>vRegTest2Asm_NonSecure</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, reg_test_asm.o(.text.vRegTest2Asm_NonSecure))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRegTest2_Task
</UL>

<P><STRONG><a name="[b9]"></a>vResetPrivilege</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, portasm.o(.text.vResetPrivilege))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferGenericCreateStatic
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferGenericCreate
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferSetTriggerLevel
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferBytesAvailable
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferSpacesAvailable
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferReset
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferIsEmpty
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferIsFull
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vStreamBufferDelete
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferReceive
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferNextMessageLengthBytes
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferSend
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vEventGroupDelete
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupSync
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupSetBits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupClearBits
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupWaitBits
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupCreateStatic
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupCreate
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerGenericCommand
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerGetExpiryTime
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerGetPeriod
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_pcTimerGetName
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTimerGetReloadMode
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTimerSetReloadMode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerGetTimerDaemonTaskHandle
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerIsTimerActive
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTimerSetTimerID
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_pvTimerGetTimerID
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vQueueDelete
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueRemoveFromSet
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueAddToSet
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueSelectFromSet
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueCreateSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGiveMutexRecursive
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueTakeMutexRecursive
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueCreateCountingSemaphoreStatic
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueCreateCountingSemaphore
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueCreateMutexStatic
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueCreateMutex
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGetMutexHolder
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueSemaphoreTake
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueuePeek
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueReceive
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxQueueSpacesAvailable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxQueueMessagesWaiting
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericReset
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericCreateStatic
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericCreate
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_ulTaskGenericNotifyValueClear
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotifyStateClear
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_ulTaskGenericNotifyTake
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotifyWait
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotify
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskCheckForTimeOut
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskSetTimeOutState
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetSchedulerState
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetCurrentTaskHandle
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskGetStackHighWaterMark
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskGetSystemState
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetHandle
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_pcTaskGetName
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskGetNumberOfTasks
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskResume
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskSuspend
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskGetInfo
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_eTaskGetState
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskPrioritySet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskPriorityGet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelay
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskAbortDelay
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskDelayUntil
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelete
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskCreateStatic
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskCreate
</UL>

<P><STRONG><a name="[23f]"></a>vStartBlockingQueueTasks</STRONG> (Thumb, 682 bytes, Stack size 496 bytes, blockq.o(.text.vStartBlockingQueueTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = vStartBlockingQueueTasks &rArr; MPU_xQueueGenericCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericCreate
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTests
</UL>

<P><STRONG><a name="[240]"></a>vStartCountingSemaphoreTasks</STRONG> (Thumb, 160 bytes, Stack size 160 bytes, countsem.o(.text.vStartCountingSemaphoreTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = vStartCountingSemaphoreTasks &rArr; MPU_xQueueCreateCountingSemaphore &rArr; xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueCreateCountingSemaphore
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTests
</UL>

<P><STRONG><a name="[241]"></a>vStartDynamicPriorityTasks</STRONG> (Thumb, 230 bytes, Stack size 360 bytes, dynamic.o(.text.vStartDynamicPriorityTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = vStartDynamicPriorityTasks &rArr; MPU_xQueueGenericCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericCreate
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTests
</UL>

<P><STRONG><a name="[242]"></a>vStartEventGroupTasks</STRONG> (Thumb, 206 bytes, Stack size 296 bytes, eventgroupsdemo.o(.text.vStartEventGroupTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = vStartEventGroupTasks &rArr; xTaskCreateRestricted &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupCreate
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTests
</UL>

<P><STRONG><a name="[243]"></a>vStartGenericQueueTasks</STRONG> (Thumb, 394 bytes, Stack size 376 bytes, genqtest.o(.text.vStartGenericQueueTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = vStartGenericQueueTasks &rArr; MPU_xQueueCreateMutex &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueCreateMutex
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericCreate
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTests
</UL>

<P><STRONG><a name="[244]"></a>vStartIntegerMathTasks</STRONG> (Thumb, 92 bytes, Stack size 88 bytes, integer.o(.text.vStartIntegerMathTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = vStartIntegerMathTasks &rArr; xTaskCreateRestricted &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTests
</UL>

<P><STRONG><a name="[245]"></a>vStartInterruptQueueTasks</STRONG> (Thumb, 288 bytes, Stack size 440 bytes, intqueue.o(.text.vStartInterruptQueueTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = vStartInterruptQueueTasks &rArr; MPU_xQueueGenericCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericCreate
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTests
</UL>

<P><STRONG><a name="[246]"></a>vStartInterruptSemaphoreTasks</STRONG> (Thumb, 214 bytes, Stack size 224 bytes, intsemtest.o(.text.vStartInterruptSemaphoreTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = vStartInterruptSemaphoreTasks &rArr; MPU_xQueueCreateMutex &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueCreateCountingSemaphore
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueCreateMutex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTests
</UL>

<P><STRONG><a name="[214]"></a>vStartMPUDemo</STRONG> (Thumb, 80 bytes, Stack size 152 bytes, mpu_demo.o(.text.vStartMPUDemo))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = vStartMPUDemo &rArr; xTaskCreateRestricted &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreateTasks
</UL>

<P><STRONG><a name="[247]"></a>vStartMathTasks</STRONG> (Thumb, 326 bytes, Stack size 296 bytes, flop.o(.text.vStartMathTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = vStartMathTasks &rArr; xTaskCreateRestricted &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTests
</UL>

<P><STRONG><a name="[248]"></a>vStartMessageBufferTasks</STRONG> (Thumb, 852 bytes, Stack size 904 bytes, messagebufferdemo.o(.text.vStartMessageBufferTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = vStartMessageBufferTasks &rArr; MPU_xStreamBufferGenericCreate &rArr; xStreamBufferGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferGenericCreateStatic
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferGenericCreate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskSuspend
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTests
</UL>

<P><STRONG><a name="[249]"></a>vStartPolledQueueTasks</STRONG> (Thumb, 200 bytes, Stack size 160 bytes, pollq.o(.text.vStartPolledQueueTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = vStartPolledQueueTasks &rArr; MPU_xQueueGenericCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericCreate
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTests
</UL>

<P><STRONG><a name="[24a]"></a>vStartQueueOverwriteTask</STRONG> (Thumb, 116 bytes, Stack size 96 bytes, queueoverwrite.o(.text.vStartQueueOverwriteTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = vStartQueueOverwriteTask &rArr; MPU_xQueueGenericCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericCreate
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTests
</UL>

<P><STRONG><a name="[24b]"></a>vStartQueuePeekTasks</STRONG> (Thumb, 380 bytes, Stack size 320 bytes, qpeek.o(.text.vStartQueuePeekTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = vStartQueuePeekTasks &rArr; MPU_xQueueGenericCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericCreate
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTests
</UL>

<P><STRONG><a name="[24c]"></a>vStartQueueSetPollingTask</STRONG> (Thumb, 134 bytes, Stack size 88 bytes, queuesetpolling.o(.text.vStartQueueSetPollingTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = vStartQueueSetPollingTask &rArr; MPU_xQueueCreateSet &rArr; xQueueCreateSet &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueAddToSet
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueCreateSet
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericCreate
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTests
</UL>

<P><STRONG><a name="[24d]"></a>vStartQueueSetTasks</STRONG> (Thumb, 116 bytes, Stack size 152 bytes, queueset.o(.text.vStartQueueSetTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = vStartQueueSetTasks &rArr; xTaskCreateRestricted &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskSuspend
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTests
</UL>

<P><STRONG><a name="[24e]"></a>vStartRecursiveMutexTasks</STRONG> (Thumb, 146 bytes, Stack size 216 bytes, recmutex.o(.text.vStartRecursiveMutexTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = vStartRecursiveMutexTasks &rArr; MPU_xQueueCreateMutex &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueCreateMutex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTests
</UL>

<P><STRONG><a name="[24f]"></a>vStartRegisterTasks</STRONG> (Thumb, 126 bytes, Stack size 168 bytes, reg_tests.o(.text.vStartRegisterTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = vStartRegisterTasks &rArr; xTaskCreateRestricted &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTests
</UL>

<P><STRONG><a name="[251]"></a>vStartSemaphoreTasks</STRONG> (Thumb, 488 bytes, Stack size 312 bytes, semtest.o(.text.vStartSemaphoreTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = vStartSemaphoreTasks &rArr; MPU_xQueueGenericSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericCreate
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTests
</UL>

<P><STRONG><a name="[252]"></a>vStartStreamBufferInterruptDemo</STRONG> (Thumb, 68 bytes, Stack size 96 bytes, streambufferinterrupt.o(.text.vStartStreamBufferInterruptDemo))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = vStartStreamBufferInterruptDemo &rArr; MPU_xStreamBufferGenericCreate &rArr; xStreamBufferGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferGenericCreate
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTests
</UL>

<P><STRONG><a name="[253]"></a>vStartStreamBufferTasks</STRONG> (Thumb, 816 bytes, Stack size 832 bytes, streambufferdemo.o(.text.vStartStreamBufferTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = vStartStreamBufferTasks &rArr; MPU_xStreamBufferGenericCreate &rArr; xStreamBufferGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferGenericCreateStatic
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferGenericCreate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskSuspend
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTests
</UL>

<P><STRONG><a name="[254]"></a>vStartTaskNotifyArrayTask</STRONG> (Thumb, 190 bytes, Stack size 104 bytes, tasknotifyarray.o(.text.vStartTaskNotifyArrayTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = vStartTaskNotifyArrayTask &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTests
</UL>

<P><STRONG><a name="[255]"></a>vStartTaskNotifyTask</STRONG> (Thumb, 176 bytes, Stack size 96 bytes, tasknotify.o(.text.vStartTaskNotifyTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = vStartTaskNotifyTask &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTests
</UL>

<P><STRONG><a name="[215]"></a>vStartTests</STRONG> (Thumb, 182 bytes, Stack size 96 bytes, testrunner.o(.text.vStartTests))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = vStartTests &rArr; vStartMessageBufferTasks &rArr; MPU_xStreamBufferGenericCreate &rArr; xStreamBufferGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartCountingSemaphoreTasks
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCreateBlockTimeTasks
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartBlockingQueueTasks
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCreateAbortDelayTasks
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTaskNotifyTask
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartRegisterTasks
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartStreamBufferInterruptDemo
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartStreamBufferTasks
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartSemaphoreTasks
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartRecursiveMutexTasks
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartQueueSetPollingTask
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartQueueSetTasks
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartQueueOverwriteTask
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartQueuePeekTasks
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartPolledQueueTasks
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartMessageBufferTasks
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartInterruptSemaphoreTasks
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartInterruptQueueTasks
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartIntegerMathTasks
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartGenericQueueTasks
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartMathTasks
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartEventGroupTasks
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartDynamicPriorityTasks
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTimerDemoTask
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTaskNotifyArrayTask
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreateTasks
</UL>

<P><STRONG><a name="[256]"></a>vStartTimerDemoTask</STRONG> (Thumb, 164 bytes, Stack size 104 bytes, timerdemo.o(.text.vStartTimerDemoTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = vStartTimerDemoTask &rArr; prvTest1_CreateTimersWithoutSchedulerRunning &rArr; MPU_xTimerGenericCommand &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest1_CreateTimersWithoutSchedulerRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTests
</UL>

<P><STRONG><a name="[20a]"></a>xAreAbortDelayTestTasksStillRunning</STRONG> (Thumb, 138 bytes, Stack size 4 bytes, abortdelay.o(.text.xAreAbortDelayTestTasksStillRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xAreAbortDelayTestTasksStillRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTask
</UL>

<P><STRONG><a name="[209]"></a>xAreBlockTimeTestTasksStillRunning</STRONG> (Thumb, 130 bytes, Stack size 4 bytes, blocktim.o(.text.xAreBlockTimeTestTasksStillRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xAreBlockTimeTestTasksStillRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTask
</UL>

<P><STRONG><a name="[1fb]"></a>xAreBlockingQueuesStillRunning</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, blockq.o(.text.xAreBlockingQueuesStillRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xAreBlockingQueuesStillRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTask
</UL>

<P><STRONG><a name="[203]"></a>xAreCountingSemaphoreTasksStillRunning</STRONG> (Thumb, 140 bytes, Stack size 4 bytes, countsem.o(.text.xAreCountingSemaphoreTasksStillRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xAreCountingSemaphoreTasksStillRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTask
</UL>

<P><STRONG><a name="[20b]"></a>xAreDynamicPriorityTasksStillRunning</STRONG> (Thumb, 160 bytes, Stack size 4 bytes, dynamic.o(.text.xAreDynamicPriorityTasksStillRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xAreDynamicPriorityTasksStillRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTask
</UL>

<P><STRONG><a name="[206]"></a>xAreEventGroupTasksStillRunning</STRONG> (Thumb, 168 bytes, Stack size 4 bytes, eventgroupsdemo.o(.text.xAreEventGroupTasksStillRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xAreEventGroupTasksStillRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTask
</UL>

<P><STRONG><a name="[1ff]"></a>xAreGenericQueueTasksStillRunning</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, genqtest.o(.text.xAreGenericQueueTasksStillRunning))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTask
</UL>

<P><STRONG><a name="[210]"></a>xAreIntQueueTasksStillRunning</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, intqueue.o(.text.xAreIntQueueTasksStillRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = xAreIntQueueTasksStillRunning &rArr; prvQueueAccessLogError
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueAccessLogError
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTask
</UL>

<P><STRONG><a name="[1fe]"></a>xAreIntegerMathsTaskStillRunning</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, integer.o(.text.xAreIntegerMathsTaskStillRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xAreIntegerMathsTaskStillRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTask
</UL>

<P><STRONG><a name="[207]"></a>xAreInterruptSemaphoreTasksStillRunning</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, intsemtest.o(.text.xAreInterruptSemaphoreTasksStillRunning))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTask
</UL>

<P><STRONG><a name="[201]"></a>xAreMathsTaskStillRunning</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, flop.o(.text.xAreMathsTaskStillRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xAreMathsTaskStillRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTask
</UL>

<P><STRONG><a name="[20c]"></a>xAreMessageBufferTasksStillRunning</STRONG> (Thumb, 292 bytes, Stack size 8 bytes, messagebufferdemo.o(.text.xAreMessageBufferTasksStillRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xAreMessageBufferTasksStillRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTask
</UL>

<P><STRONG><a name="[1fd]"></a>xArePollingQueuesStillRunning</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, pollq.o(.text.xArePollingQueuesStillRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xArePollingQueuesStillRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTask
</UL>

<P><STRONG><a name="[200]"></a>xAreQueuePeekTasksStillRunning</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, qpeek.o(.text.xAreQueuePeekTasksStillRunning))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTask
</UL>

<P><STRONG><a name="[208]"></a>xAreQueueSetPollTasksStillRunning</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, queuesetpolling.o(.text.xAreQueueSetPollTasksStillRunning))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTask
</UL>

<P><STRONG><a name="[204]"></a>xAreQueueSetTasksStillRunning</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, queueset.o(.text.xAreQueueSetTasksStillRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xAreQueueSetTasksStillRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTask
</UL>

<P><STRONG><a name="[202]"></a>xAreRecursiveMutexTasksStillRunning</STRONG> (Thumb, 222 bytes, Stack size 4 bytes, recmutex.o(.text.xAreRecursiveMutexTasksStillRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xAreRecursiveMutexTasksStillRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTask
</UL>

<P><STRONG><a name="[211]"></a>xAreRegisterTasksStillRunning</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, reg_tests.o(.text.xAreRegisterTasksStillRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xAreRegisterTasksStillRunning &rArr; MPU_xTaskDelayUntil &rArr; xTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskDelayUntil
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTask
</UL>

<P><STRONG><a name="[1fc]"></a>xAreSemaphoreTasksStillRunning</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, semtest.o(.text.xAreSemaphoreTasksStillRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xAreSemaphoreTasksStillRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTask
</UL>

<P><STRONG><a name="[20d]"></a>xAreStreamBufferTasksStillRunning</STRONG> (Thumb, 332 bytes, Stack size 4 bytes, streambufferdemo.o(.text.xAreStreamBufferTasksStillRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xAreStreamBufferTasksStillRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTask
</UL>

<P><STRONG><a name="[1fa]"></a>xAreTaskNotificationArrayTasksStillRunning</STRONG> (Thumb, 180 bytes, Stack size 4 bytes, tasknotifyarray.o(.text.xAreTaskNotificationArrayTasksStillRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xAreTaskNotificationArrayTasksStillRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTask
</UL>

<P><STRONG><a name="[1f9]"></a>xAreTaskNotificationTasksStillRunning</STRONG> (Thumb, 152 bytes, Stack size 4 bytes, tasknotify.o(.text.xAreTaskNotificationTasksStillRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xAreTaskNotificationTasksStillRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTask
</UL>

<P><STRONG><a name="[20f]"></a>xAreTimerDemoTasksStillRunning</STRONG> (Thumb, 190 bytes, Stack size 12 bytes, timerdemo.o(.text.xAreTimerDemoTasksStillRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = xAreTimerDemoTasksStillRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTask
</UL>

<P><STRONG><a name="[20e]"></a>xIsInterruptStreamBufferDemoStillRunning</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, streambufferinterrupt.o(.text.xIsInterruptStreamBufferDemoStillRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xIsInterruptStreamBufferDemoStillRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTask
</UL>

<P><STRONG><a name="[b7]"></a>xIsPrivileged</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, portasm.o(.text.xIsPrivileged))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferGenericCreateStatic
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferGenericCreate
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferSetTriggerLevel
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferBytesAvailable
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferSpacesAvailable
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferReset
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferIsEmpty
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferIsFull
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vStreamBufferDelete
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferReceive
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferNextMessageLengthBytes
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferSend
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vEventGroupDelete
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupSync
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupSetBits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupClearBits
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupWaitBits
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupCreateStatic
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupCreate
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerGenericCommand
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerGetExpiryTime
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerGetPeriod
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_pcTimerGetName
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTimerGetReloadMode
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTimerSetReloadMode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerGetTimerDaemonTaskHandle
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerIsTimerActive
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTimerSetTimerID
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_pvTimerGetTimerID
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vQueueDelete
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueRemoveFromSet
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueAddToSet
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueSelectFromSet
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueCreateSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGiveMutexRecursive
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueTakeMutexRecursive
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueCreateCountingSemaphoreStatic
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueCreateCountingSemaphore
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueCreateMutexStatic
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueCreateMutex
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGetMutexHolder
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueSemaphoreTake
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueuePeek
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueReceive
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxQueueSpacesAvailable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxQueueMessagesWaiting
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericReset
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericCreateStatic
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericCreate
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_ulTaskGenericNotifyValueClear
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotifyStateClear
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_ulTaskGenericNotifyTake
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotifyWait
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotify
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskCheckForTimeOut
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskSetTimeOutState
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetSchedulerState
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetCurrentTaskHandle
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskGetStackHighWaterMark
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskGetSystemState
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetHandle
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_pcTaskGetName
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskGetNumberOfTasks
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskResume
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskSuspend
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskGetInfo
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_eTaskGetState
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskPrioritySet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskPriorityGet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelay
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskAbortDelay
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskDelayUntil
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelete
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskCreateStatic
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskCreate
</UL>

<P><STRONG><a name="[205]"></a>xIsQueueOverwriteTaskStillRunning</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, queueoverwrite.o(.text.xIsQueueOverwriteTaskStillRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xIsQueueOverwriteTaskStillRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTask
</UL>

<P><STRONG><a name="[257]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[291]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[292]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[293]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1e3]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTask
</UL>

<P><STRONG><a name="[259]"></a>__0sprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[294]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[295]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[296]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[19c]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartStreamBufferTasks
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartMessageBufferTasks
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReceiverTask
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSenderTask
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNonBlockingSenderTask
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNonBlockingReceiverTask
</UL>

<P><STRONG><a name="[1de]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[135]"></a>prvTestWaitCondition</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, event_groups.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvTestWaitCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[141]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>

<P><STRONG><a name="[144]"></a>prvInitialiseMutex</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[146]"></a>prvCopyDataToQueue</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[147]"></a>prvNotifyQueueSetContainer</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[149]"></a>prvIsQueueFull</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[14b]"></a>prvUnlockQueue</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[14d]"></a>prvIsQueueEmpty</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[14f]"></a>prvGetDisinheritPriorityAfterTimeout</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvGetDisinheritPriorityAfterTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[158]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, queue.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[162]"></a>prvInitialiseNewStreamBuffer</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, stream_buffer.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInitialiseNewStreamBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReset
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreateStatic
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
</UL>

<P><STRONG><a name="[169]"></a>prvBytesInBuffer</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stream_buffer.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvBytesInBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceiveFromISR
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferNextMessageLengthBytes
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferBytesAvailable
</UL>

<P><STRONG><a name="[16a]"></a>prvWriteMessageToBuffer</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, stream_buffer.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvWriteMessageToBuffer &rArr; prvWriteBytesToBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteBytesToBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
</UL>

<P><STRONG><a name="[16b]"></a>prvWriteBytesToBuffer</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, stream_buffer.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvWriteBytesToBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteMessageToBuffer
</UL>

<P><STRONG><a name="[16e]"></a>prvReadMessageFromBuffer</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, stream_buffer.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvReadMessageFromBuffer &rArr; prvReadBytesFromBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReadBytesFromBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceiveFromISR
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
</UL>

<P><STRONG><a name="[16f]"></a>prvReadBytesFromBuffer</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, stream_buffer.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvReadBytesFromBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferNextMessageLengthBytes
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReadMessageFromBuffer
</UL>

<P><STRONG><a name="[174]"></a>prvInitialiseNewTask</STRONG> (Thumb, 338 bytes, Stack size 64 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvInitialiseNewTask &rArr; vPortStoreTaskMPUSettings
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortStoreTaskMPUSettings
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestrictedStatic
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[175]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists &rArr; vListInitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestricted
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateRestrictedStatic
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[17a]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInitialiseTaskLists &rArr; vListInitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[181]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tasks.o(privileged_functions))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[182]"></a>prvDeleteTCB</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[183]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskGenericNotifyTake
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskDelayUntil
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyWait
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[188]"></a>prvTaskIsTaskSuspended</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvTaskIsTaskSuspended
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[5a]"></a>prvIdleTask</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetExpectedIdleTime
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(privileged_functions)
</UL>
<P><STRONG><a name="[18d]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[18e]"></a>prvGetExpectedIdleTime</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvGetExpectedIdleTime
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[194]"></a>prvSearchForNameWithinSingleList</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, tasks.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvSearchForNameWithinSingleList
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetHandle
</UL>

<P><STRONG><a name="[195]"></a>prvListTasksWithinSingleList</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, tasks.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
</UL>

<P><STRONG><a name="[199]"></a>prvTaskCheckFreeStackSpace</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tasks.o(privileged_functions), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>

<P><STRONG><a name="[19b]"></a>prvWriteNameToBuffer</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tasks.o(privileged_functions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
</UL>

<P><STRONG><a name="[1a0]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, timers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[5b]"></a>prvTimerTask</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(privileged_functions)
</UL>
<P><STRONG><a name="[1a2]"></a>prvGetNextExpireTime</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, timers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvGetNextExpireTime
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[1a3]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, timers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; vQueueWaitForMessageRestricted &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[1a4]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 360 bytes, Stack size 48 bytes, timers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prvProcessReceivedCommands &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[1a6]"></a>prvInitialiseNewTimer</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, timers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateStatic
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[1aa]"></a>prvSampleTimeNow</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, timers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[1ab]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, timers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[1ac]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, timers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[1ad]"></a>prvReloadTimer</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, timers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[1ae]"></a>prvSwitchTimerLists</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, timers.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvSwitchTimerLists &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[5c]"></a>prvTaskExitError</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, port.o(.text.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvTaskExitError
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(privileged_functions)
</UL>
<P><STRONG><a name="[1af]"></a>prvSetupMPU</STRONG> (Thumb, 292 bytes, Stack size 20 bytes, port.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = prvSetupMPU
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1b4]"></a>prvGetRegionAccessPermissions</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, port.o(privileged_functions), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortIsAuthorizedToAccessBuffer
</UL>

<P><STRONG><a name="[1b7]"></a>prvHeapInit</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, heap_4.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1b8]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 198 bytes, Stack size 12 bytes, heap_4.o(privileged_functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[97]"></a>prvROAccessTask</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mpu_demo.o(.text.prvROAccessTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prvROAccessTask &rArr; MPU_vTaskDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpu_demo.o(.rodata..L__const.vStartMPUDemo.xROAccessTaskParameters)
</UL>
<P><STRONG><a name="[98]"></a>prvRWAccessTask</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mpu_demo.o(.text.prvRWAccessTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prvRWAccessTask &rArr; MPU_vTaskDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpu_demo.o(.rodata..L__const.vStartMPUDemo.xRWAccessTaskParameters)
</UL>
<P><STRONG><a name="[66]"></a>prvControllingTask</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, abortdelay.o(.text.prvControllingTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvControllingTask &rArr; MPU_xTaskAbortDelay &rArr; xTaskAbortDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckExpectedTimeIsWithinAnAcceptableMargin
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_ulTaskGenericNotifyTake
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotify
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetHandle
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskPrioritySet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelay
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskAbortDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abortdelay.o(.text.vCreateAbortDelayTasks)
</UL>
<P><STRONG><a name="[67]"></a>prvBlockingTask</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, abortdelay.o(.text.prvBlockingTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = prvBlockingTask &rArr; prvTestAbortingQueueSend &rArr; MPU_xQueueGenericSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingStreamBufferReceive
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingQueueSend
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingEventGroupWait
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingSemaphoreTake
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingTaskDelayUntil
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingTaskDelay
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingTaskNotifyTake
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingTaskNotifyWait
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPerformSingleTaskTests
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotifyWait
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotify
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abortdelay.o(.text.vCreateAbortDelayTasks)
</UL>
<P><STRONG><a name="[1f6]"></a>prvCheckExpectedTimeIsWithinAnAcceptableMargin</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, abortdelay.o(.text.prvCheckExpectedTimeIsWithinAnAcceptableMargin))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = prvCheckExpectedTimeIsWithinAnAcceptableMargin &rArr; MPU_xTaskGetTickCount &rArr; xTaskGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingStreamBufferReceive
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingQueueSend
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingEventGroupWait
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingSemaphoreTake
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingTaskDelayUntil
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingTaskDelay
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingTaskNotifyTake
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestAbortingTaskNotifyWait
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvControllingTask
</UL>

<P><STRONG><a name="[1ec]"></a>prvPerformSingleTaskTests</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, abortdelay.o(.text.prvPerformSingleTaskTests))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prvPerformSingleTaskTests &rArr; MPU_xTaskAbortDelay &rArr; xTaskAbortDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetCurrentTaskHandle
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskAbortDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockingTask
</UL>

<P><STRONG><a name="[1ed]"></a>prvTestAbortingTaskNotifyWait</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, abortdelay.o(.text.prvTestAbortingTaskNotifyWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prvTestAbortingTaskNotifyWait &rArr; MPU_xTaskGenericNotifyWait &rArr; xTaskGenericNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckExpectedTimeIsWithinAnAcceptableMargin
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotifyWait
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockingTask
</UL>

<P><STRONG><a name="[1ee]"></a>prvTestAbortingTaskNotifyTake</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, abortdelay.o(.text.prvTestAbortingTaskNotifyTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = prvTestAbortingTaskNotifyTake &rArr; MPU_ulTaskGenericNotifyTake &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckExpectedTimeIsWithinAnAcceptableMargin
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_ulTaskGenericNotifyTake
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockingTask
</UL>

<P><STRONG><a name="[1ef]"></a>prvTestAbortingTaskDelay</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, abortdelay.o(.text.prvTestAbortingTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prvTestAbortingTaskDelay &rArr; MPU_vTaskDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckExpectedTimeIsWithinAnAcceptableMargin
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockingTask
</UL>

<P><STRONG><a name="[1f0]"></a>prvTestAbortingTaskDelayUntil</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, abortdelay.o(.text.prvTestAbortingTaskDelayUntil))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvTestAbortingTaskDelayUntil &rArr; MPU_xTaskDelayUntil &rArr; xTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckExpectedTimeIsWithinAnAcceptableMargin
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskDelayUntil
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockingTask
</UL>

<P><STRONG><a name="[1f1]"></a>prvTestAbortingSemaphoreTake</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, abortdelay.o(.text.prvTestAbortingSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prvTestAbortingSemaphoreTake &rArr; MPU_xQueueSemaphoreTake &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckExpectedTimeIsWithinAnAcceptableMargin
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vQueueDelete
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueSemaphoreTake
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericCreateStatic
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockingTask
</UL>

<P><STRONG><a name="[1f2]"></a>prvTestAbortingEventGroupWait</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, abortdelay.o(.text.prvTestAbortingEventGroupWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvTestAbortingEventGroupWait &rArr; MPU_xEventGroupWaitBits &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckExpectedTimeIsWithinAnAcceptableMargin
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vEventGroupDelete
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupWaitBits
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupCreateStatic
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockingTask
</UL>

<P><STRONG><a name="[1f3]"></a>prvTestAbortingQueueSend</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, abortdelay.o(.text.prvTestAbortingQueueSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = prvTestAbortingQueueSend &rArr; MPU_xQueueGenericSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckExpectedTimeIsWithinAnAcceptableMargin
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vQueueDelete
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericCreateStatic
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockingTask
</UL>

<P><STRONG><a name="[1f4]"></a>prvTestAbortingStreamBufferReceive</STRONG> (Thumb, 192 bytes, Stack size 88 bytes, abortdelay.o(.text.prvTestAbortingStreamBufferReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = prvTestAbortingStreamBufferReceive &rArr; MPU_xStreamBufferReceive &rArr; xStreamBufferReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckExpectedTimeIsWithinAnAcceptableMargin
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferGenericCreateStatic
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vStreamBufferDelete
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferReceive
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockingTask
</UL>

<P><STRONG><a name="[6a]"></a>vBlockingQueueConsumer</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, blockq.o(.text.vBlockingQueueConsumer))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = vBlockingQueueConsumer &rArr; MPU_xQueueReceive &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blockq.o(.text.vStartBlockingQueueTasks)
</UL>
<P><STRONG><a name="[6b]"></a>vBlockingQueueProducer</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, blockq.o(.text.vBlockingQueueProducer))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = vBlockingQueueProducer &rArr; MPU_xQueueGenericSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blockq.o(.text.vStartBlockingQueueTasks)
</UL>
<P><STRONG><a name="[68]"></a>vPrimaryBlockTimeTestTask</STRONG> (Thumb, 1010 bytes, Stack size 32 bytes, blocktim.o(.text.vPrimaryBlockTimeTestTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = vPrimaryBlockTimeTestTask &rArr; MPU_xQueueGenericSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBasicDelayTests
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueReceive
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskResume
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskPrioritySet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blocktim.o(.text.vCreateBlockTimeTasks)
</UL>
<P><STRONG><a name="[69]"></a>vSecondaryBlockTimeTestTask</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, blocktim.o(.text.vSecondaryBlockTimeTestTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = vSecondaryBlockTimeTestTask &rArr; MPU_xQueueGenericSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueReceive
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskSuspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blocktim.o(.text.vCreateBlockTimeTasks)
</UL>
<P><STRONG><a name="[1e7]"></a>prvBasicDelayTests</STRONG> (Thumb, 360 bytes, Stack size 56 bytes, blocktim.o(.text.prvBasicDelayTests))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prvBasicDelayTests &rArr; MPU_xTaskDelayUntil &rArr; xTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskPrioritySet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelay
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskDelayUntil
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPrimaryBlockTimeTestTask
</UL>

<P><STRONG><a name="[85]"></a>prvCountingSemaphoreTask</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, countsem.o(.text.prvCountingSemaphoreTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = prvCountingSemaphoreTask &rArr; prvIncrementSemaphoreCount &rArr; MPU_xQueueGenericSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIncrementSemaphoreCount
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDecrementSemaphoreCount
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueSemaphoreTake
</UL>
<BR>[Address Reference Count : 2]<UL><LI> countsem.o(.rodata..L__const.vStartCountingSemaphoreTasks.xCountingSemaphoreTask1)
<LI> countsem.o(.rodata..L__const.vStartCountingSemaphoreTasks.xCountingSemaphoreTask2)
</UL>
<P><STRONG><a name="[212]"></a>prvDecrementSemaphoreCount</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, countsem.o(.text.prvDecrementSemaphoreCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prvDecrementSemaphoreCount &rArr; MPU_xQueueGenericSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueSemaphoreTake
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxQueueMessagesWaiting
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCountingSemaphoreTask
</UL>

<P><STRONG><a name="[213]"></a>prvIncrementSemaphoreCount</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, countsem.o(.text.prvIncrementSemaphoreCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prvIncrementSemaphoreCount &rArr; MPU_xQueueGenericSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueSemaphoreTake
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxQueueMessagesWaiting
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCountingSemaphoreTask
</UL>

<P><STRONG><a name="[86]"></a>vContinuousIncrementTask</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dynamic.o(.text.vContinuousIncrementTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vContinuousIncrementTask &rArr; MPU_vTaskPrioritySet &rArr; vTaskPrioritySet &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskPrioritySet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskPriorityGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dynamic.o(.rodata..L__const.vStartDynamicPriorityTasks.xContinuousIncrementTask)
</UL>
<P><STRONG><a name="[88]"></a>vLimitedIncrementTask</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dynamic.o(.text.vLimitedIncrementTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vLimitedIncrementTask &rArr; MPU_vTaskSuspend &rArr; vTaskSuspend &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskSuspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dynamic.o(.rodata..L__const.vStartDynamicPriorityTasks.xLimitedIncrementTask)
</UL>
<P><STRONG><a name="[87]"></a>vCounterControlTask</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, dynamic.o(.text.vCounterControlTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vCounterControlTask &rArr; MPU_vTaskDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskResume
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskSuspend
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_eTaskGetState
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelay
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dynamic.o(.rodata..L__const.vStartDynamicPriorityTasks.xCounterControlTask)
</UL>
<P><STRONG><a name="[8a]"></a>vQueueSendWhenSuspendedTask</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dynamic.o(.text.vQueueSendWhenSuspendedTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = vQueueSendWhenSuspendedTask &rArr; MPU_xQueueGenericSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelay
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dynamic.o(.rodata..L__const.vStartDynamicPriorityTasks.xQueueSendWhenSuspendedTask)
</UL>
<P><STRONG><a name="[89]"></a>vQueueReceiveWhenSuspendedTask</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dynamic.o(.text.vQueueReceiveWhenSuspendedTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = vQueueReceiveWhenSuspendedTask &rArr; MPU_xQueueReceive &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueReceive
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dynamic.o(.rodata..L__const.vStartDynamicPriorityTasks.xQueueReceiveWhenSuspendedTask)
</UL>
<P><STRONG><a name="[8d]"></a>prvTestSlaveTask</STRONG> (Thumb, 436 bytes, Stack size 56 bytes, eventgroupsdemo.o(.text.prvTestSlaveTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = prvTestSlaveTask &rArr; MPU_xEventGroupSync &rArr; xEventGroupSync &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupSync
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupSetBits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupClearBits
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupWaitBits
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskSuspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eventgroupsdemo.o(.rodata..L__const.vStartEventGroupTasks.xTestSlaveTaskParams)
</UL>
<P><STRONG><a name="[8c]"></a>prvTestMasterTask</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, eventgroupsdemo.o(.text.prvTestMasterTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = prvTestMasterTask &rArr; prvPerformTaskSyncTests &rArr; MPU_xEventGroupSync &rArr; xEventGroupSync &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vEventGroupDelete
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupCreate
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_eTaskGetState
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPerformTaskSyncTests
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBitCombinationTestMasterFunction
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSelectiveBitsTestMasterFunction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eventgroupsdemo.o(.rodata..L__const.vStartEventGroupTasks.xTestMasterTaskParams)
</UL>
<P><STRONG><a name="[22c]"></a>prvSelectiveBitsTestMasterFunction</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, eventgroupsdemo.o(.text.prvSelectiveBitsTestMasterFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prvSelectiveBitsTestMasterFunction &rArr; MPU_xEventGroupSetBits &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vEventGroupDelete
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupSetBits
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskResume
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_eTaskGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestMasterTask
</UL>

<P><STRONG><a name="[1e8]"></a>prvBitCombinationTestMasterFunction</STRONG> (Thumb, 414 bytes, Stack size 32 bytes, eventgroupsdemo.o(.text.prvBitCombinationTestMasterFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prvBitCombinationTestMasterFunction &rArr; MPU_xEventGroupWaitBits &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupSetBits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupClearBits
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupWaitBits
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskResume
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_eTaskGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestMasterTask
</UL>

<P><STRONG><a name="[225]"></a>prvPerformTaskSyncTests</STRONG> (Thumb, 770 bytes, Stack size 48 bytes, eventgroupsdemo.o(.text.prvPerformTaskSyncTests))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = prvPerformTaskSyncTests &rArr; MPU_xEventGroupSync &rArr; xEventGroupSync &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupSync
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupSetBits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupClearBits
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskResume
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_eTaskGetState
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskPrioritySet
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestMasterTask
</UL>

<P><STRONG><a name="[8b]"></a>prvSyncTask</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, eventgroupsdemo.o(.text.prvSyncTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = prvSyncTask &rArr; MPU_xEventGroupSync &rArr; xEventGroupSync &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupSync
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupWaitBits
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskSuspend
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSelectiveBitsTestSlaveFunction
</UL>
<BR>[Address Reference Count : 2]<UL><LI> eventgroupsdemo.o(.rodata..L__const.vStartEventGroupTasks.xSyncTaskOneParams)
<LI> eventgroupsdemo.o(.rodata..L__const.vStartEventGroupTasks.xSyncTaskTwoParams)
</UL>
<P><STRONG><a name="[22d]"></a>prvSelectiveBitsTestSlaveFunction</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, eventgroupsdemo.o(.text.prvSelectiveBitsTestSlaveFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prvSelectiveBitsTestSlaveFunction &rArr; MPU_xEventGroupWaitBits &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xEventGroupWaitBits
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetCurrentTaskHandle
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskSuspend
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSyncTask
</UL>

<P><STRONG><a name="[70]"></a>vCompetingMathTask1</STRONG> (Thumb, 260 bytes, Stack size 72 bytes, flop.o(.text.vCompetingMathTask1))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = vCompetingMathTask1 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flop.o(.text.vStartMathTasks)
</UL>
<P><STRONG><a name="[71]"></a>vCompetingMathTask2</STRONG> (Thumb, 260 bytes, Stack size 72 bytes, flop.o(.text.vCompetingMathTask2))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = vCompetingMathTask2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flop.o(.text.vStartMathTasks)
</UL>
<P><STRONG><a name="[72]"></a>vCompetingMathTask3</STRONG> (Thumb, 266 bytes, Stack size 72 bytes, flop.o(.text.vCompetingMathTask3))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = vCompetingMathTask3 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flop.o(.text.vStartMathTasks)
</UL>
<P><STRONG><a name="[73]"></a>vCompetingMathTask4</STRONG> (Thumb, 276 bytes, Stack size 80 bytes, flop.o(.text.vCompetingMathTask4))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = vCompetingMathTask4 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flop.o(.text.vStartMathTasks)
</UL>
<P><STRONG><a name="[6c]"></a>prvSendFrontAndBackTest</STRONG> (Thumb, 986 bytes, Stack size 40 bytes, genqtest.o(.text.prvSendFrontAndBackTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = prvSendFrontAndBackTest &rArr; MPU_xQueueGenericSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueuePeek
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueReceive
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxQueueMessagesWaiting
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> genqtest.o(.text.vStartGenericQueueTasks)
</UL>
<P><STRONG><a name="[6d]"></a>prvLowPriorityMutexTask</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, genqtest.o(.text.prvLowPriorityMutexTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = prvLowPriorityMutexTask &rArr; MPU_xQueueCreateMutex &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueCreateMutex
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHighPriorityTimeout
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTakeTwoMutexesReturnInSameOrder
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTakeTwoMutexesReturnInDifferentOrder
</UL>
<BR>[Address Reference Count : 1]<UL><LI> genqtest.o(.text.vStartGenericQueueTasks)
</UL>
<P><STRONG><a name="[6e]"></a>prvHighPriorityMutexTask</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, genqtest.o(.text.prvHighPriorityMutexTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prvHighPriorityMutexTask &rArr; MPU_xQueueGenericSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueSemaphoreTake
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskSuspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> genqtest.o(.text.vStartGenericQueueTasks)
</UL>
<P><STRONG><a name="[21f]"></a>prvTakeTwoMutexesReturnInDifferentOrder</STRONG> (Thumb, 424 bytes, Stack size 24 bytes, genqtest.o(.text.prvTakeTwoMutexesReturnInDifferentOrder))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prvTakeTwoMutexesReturnInDifferentOrder &rArr; MPU_xQueueGenericSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueSemaphoreTake
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskResume
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_eTaskGetState
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskPrioritySet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskPriorityGet
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLowPriorityMutexTask
</UL>

<P><STRONG><a name="[220]"></a>prvTakeTwoMutexesReturnInSameOrder</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, genqtest.o(.text.prvTakeTwoMutexesReturnInSameOrder))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prvTakeTwoMutexesReturnInSameOrder &rArr; MPU_xQueueGenericSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueSemaphoreTake
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskResume
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_eTaskGetState
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskPriorityGet
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLowPriorityMutexTask
</UL>

<P><STRONG><a name="[21a]"></a>prvHighPriorityTimeout</STRONG> (Thumb, 754 bytes, Stack size 24 bytes, genqtest.o(.text.prvHighPriorityTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prvHighPriorityTimeout &rArr; MPU_xQueueGenericSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGetMutexHolder
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueSemaphoreTake
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetCurrentTaskHandle
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskResume
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskPriorityGet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelay
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskAbortDelay
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGetMutexHolderFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLowPriorityMutexTask
</UL>

<P><STRONG><a name="[8e]"></a>prvMediumPriorityMutexTask</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, genqtest.o(.text.prvMediumPriorityMutexTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvMediumPriorityMutexTask &rArr; MPU_vTaskSuspend &rArr; vTaskSuspend &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskSuspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> genqtest.o(.rodata..L__const.vStartGenericQueueTasks.xMediumPriorityMutexTaskParameters)
</UL>
<P><STRONG><a name="[6f]"></a>vCompeteingIntMathTask</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, integer.o(.text.vCompeteingIntMathTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vCompeteingIntMathTask
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> integer.o(.text.vStartIntegerMathTasks)
</UL>
<P><STRONG><a name="[8f]"></a>prvHigherPriorityNormallyEmptyTask</STRONG> (Thumb, 418 bytes, Stack size 40 bytes, intqueue.o(.text.prvHigherPriorityNormallyEmptyTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prvHigherPriorityNormallyEmptyTask &rArr; MPU_xQueueReceive &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueReceive
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskResume
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskSuspend
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitialiseTimerForIntQueueTest
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRecordValue_NormallyEmpty
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueAccessLogError
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 2]<UL><LI> intqueue.o(.rodata..L__const.vStartInterruptQueueTasks.x1stHigherPriorityNormallyEmptyTaskParameters)
<LI> intqueue.o(.rodata..L__const.vStartInterruptQueueTasks.x2ndHigherPriorityNormallyEmptyTaskParameters)
</UL>
<P><STRONG><a name="[1e5]"></a>prvQueueAccessLogError</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, intqueue.o(.text.prvQueueAccessLogError))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvQueueAccessLogError
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xAreIntQueueTasksStillRunning
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRecordValue_NormallyFull
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLowerPriorityNormallyFullTask
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv2ndHigherPriorityNormallyFullTask
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv1stHigherPriorityNormallyFullTask
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLowerPriorityNormallyEmptyTask
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRecordValue_NormallyEmpty
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHigherPriorityNormallyEmptyTask
</UL>

<P><STRONG><a name="[21d]"></a>prvRecordValue_NormallyEmpty</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, intqueue.o(.text.prvRecordValue_NormallyEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = prvRecordValue_NormallyEmpty &rArr; prvQueueAccessLogError
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueAccessLogError
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLowerPriorityNormallyEmptyTask
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHigherPriorityNormallyEmptyTask
</UL>

<P><STRONG><a name="[92]"></a>prvLowerPriorityNormallyEmptyTask</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, intqueue.o(.text.prvLowerPriorityNormallyEmptyTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prvLowerPriorityNormallyEmptyTask &rArr; MPU_xQueueGenericSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueReceive
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskResume
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_eTaskGetState
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskPrioritySet
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRecordValue_NormallyEmpty
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueAccessLogError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intqueue.o(.rodata..L__const.vStartInterruptQueueTasks.xLowerPriorityNormallyEmptyTaskParameters)
</UL>
<P><STRONG><a name="[90]"></a>prv1stHigherPriorityNormallyFullTask</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, intqueue.o(.text.prv1stHigherPriorityNormallyFullTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prv1stHigherPriorityNormallyFullTask &rArr; MPU_xQueueGenericSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskResume
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskSuspend
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelay
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueAccessLogError
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intqueue.o(.rodata..L__const.vStartInterruptQueueTasks.x1stHigherPriorityNormallyFullTaskParameters)
</UL>
<P><STRONG><a name="[91]"></a>prv2ndHigherPriorityNormallyFullTask</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, intqueue.o(.text.prv2ndHigherPriorityNormallyFullTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prv2ndHigherPriorityNormallyFullTask &rArr; MPU_xQueueGenericSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueAccessLogError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intqueue.o(.rodata..L__const.vStartInterruptQueueTasks.x2ndHigherPriorityNormallyFullTaskParameters)
</UL>
<P><STRONG><a name="[93]"></a>prvLowerPriorityNormallyFullTask</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, intqueue.o(.text.prvLowerPriorityNormallyFullTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prvLowerPriorityNormallyFullTask &rArr; MPU_xQueueGenericSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueReceive
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskResume
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_eTaskGetState
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskPrioritySet
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRecordValue_NormallyFull
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueAccessLogError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intqueue.o(.rodata..L__const.vStartInterruptQueueTasks.xLowerPriorityNormallyFullTaskParameters)
</UL>
<P><STRONG><a name="[221]"></a>prvRecordValue_NormallyFull</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, intqueue.o(.text.prvRecordValue_NormallyFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = prvRecordValue_NormallyFull &rArr; prvQueueAccessLogError
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueAccessLogError
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvLowerPriorityNormallyFullTask
</UL>

<P><STRONG><a name="[96]"></a>vInterruptMutexSlaveTask</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, intsemtest.o(.text.vInterruptMutexSlaveTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = vInterruptMutexSlaveTask &rArr; MPU_xQueueGenericSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueSemaphoreTake
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskSuspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intsemtest.o(.rodata..L__const.vStartInterruptSemaphoreTasks.xInterruptMutexSlaveTaskParameters)
</UL>
<P><STRONG><a name="[95]"></a>vInterruptMutexMasterTask</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, intsemtest.o(.text.vInterruptMutexMasterTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = vInterruptMutexMasterTask &rArr; prvTakeAndGiveInTheOppositeOrder &rArr; MPU_xQueueGenericSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelay
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTakeAndGiveInTheOppositeOrder
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTakeAndGiveInTheSameOrder
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intsemtest.o(.rodata..L__const.vStartInterruptSemaphoreTasks.xInterruptMutexMasterTaskParameters)
</UL>
<P><STRONG><a name="[233]"></a>prvTakeAndGiveInTheSameOrder</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, intsemtest.o(.text.prvTakeAndGiveInTheSameOrder))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = prvTakeAndGiveInTheSameOrder &rArr; MPU_xQueueGenericSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueSemaphoreTake
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericReset
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskResume
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_eTaskGetState
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskPriorityGet
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInterruptMutexMasterTask
</UL>

<P><STRONG><a name="[232]"></a>prvTakeAndGiveInTheOppositeOrder</STRONG> (Thumb, 420 bytes, Stack size 16 bytes, intsemtest.o(.text.prvTakeAndGiveInTheOppositeOrder))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = prvTakeAndGiveInTheOppositeOrder &rArr; MPU_xQueueGenericSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueSemaphoreTake
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericReset
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskResume
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_eTaskGetState
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskPriorityGet
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInterruptMutexMasterTask
</UL>

<P><STRONG><a name="[94]"></a>vInterruptCountingSemaphoreTask</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, intsemtest.o(.text.vInterruptCountingSemaphoreTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = vInterruptCountingSemaphoreTask &rArr; MPU_xQueueSemaphoreTake &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueSemaphoreTake
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxQueueSpacesAvailable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxQueueMessagesWaiting
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskPrioritySet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intsemtest.o(.rodata..L__const.vStartInterruptSemaphoreTasks.xInterruptCountingSemaphoreTaskParameters)
</UL>
<P><STRONG><a name="[9c]"></a>prvEchoServer</STRONG> (Thumb, 206 bytes, Stack size 104 bytes, messagebufferdemo.o(.text.prvEchoServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = prvEchoServer &rArr; prvSingleTaskTests &rArr; MPU_xStreamBufferSend &rArr; xStreamBufferSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferGenericCreate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vStreamBufferDelete
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferReceive
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferSend
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskResume
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskPriorityGet
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> messagebufferdemo.o(.rodata..L__const.vStartMessageBufferTasks.xEchoServerTask1Parameters)
<LI> messagebufferdemo.o(.rodata..L__const.vStartMessageBufferTasks.xEchoServerTask2Parameters)
</UL>
<P><STRONG><a name="[218]"></a>prvSingleTaskTests</STRONG> (Thumb, 1188 bytes, Stack size 136 bytes, messagebufferdemo.o(.text.prvSingleTaskTests))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = prvSingleTaskTests &rArr; MPU_xStreamBufferSend &rArr; xStreamBufferSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferSpacesAvailable
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferReset
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferIsEmpty
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferIsFull
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferReceive
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferNextMessageLengthBytes
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferSend
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskPrioritySet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskPriorityGet
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceiveFromISR
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSenderTask
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoServer
</UL>

<P><STRONG><a name="[9d]"></a>prvNonBlockingReceiverTask</STRONG> (Thumb, 218 bytes, Stack size 72 bytes, messagebufferdemo.o(.text.prvNonBlockingReceiverTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = prvNonBlockingReceiverTask &rArr; MPU_xStreamBufferReceive &rArr; xStreamBufferReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferReceive
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messagebufferdemo.o(.rodata..L__const.vStartMessageBufferTasks.xNonBlockingReceiverTaskParameters)
</UL>
<P><STRONG><a name="[9e]"></a>prvNonBlockingSenderTask</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, messagebufferdemo.o(.text.prvNonBlockingSenderTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prvNonBlockingSenderTask &rArr; MPU_xStreamBufferSend &rArr; xStreamBufferSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferSend
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messagebufferdemo.o(.rodata..L__const.vStartMessageBufferTasks.xNonBlockingSenderTaskParameters)
</UL>
<P><STRONG><a name="[9b]"></a>prvEchoClient</STRONG> (Thumb, 218 bytes, Stack size 144 bytes, messagebufferdemo.o(.text.prvEchoClient))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = prvEchoClient &rArr; MPU_xStreamBufferSend &rArr; xStreamBufferSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferReceive
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferSend
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskPriorityGet
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> messagebufferdemo.o(.rodata..L__const.vStartMessageBufferTasks.xEchoClientTask1Parameters)
<LI> messagebufferdemo.o(.rodata..L__const.vStartMessageBufferTasks.xEchoClientTask2Parameters)
</UL>
<P><STRONG><a name="[a0]"></a>prvSenderTask</STRONG> (Thumb, 274 bytes, Stack size 112 bytes, messagebufferdemo.o(.text.prvSenderTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = prvSenderTask &rArr; prvSingleTaskTests &rArr; MPU_xStreamBufferSend &rArr; xStreamBufferSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferGenericCreateStatic
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vStreamBufferDelete
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferSend
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskResume
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskPriorityGet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelay
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 2]<UL><LI> messagebufferdemo.o(.rodata..L__const.vStartMessageBufferTasks.xSenderTask1Parameters)
<LI> messagebufferdemo.o(.rodata..L__const.vStartMessageBufferTasks.xSenderTask2Parameters)
</UL>
<P><STRONG><a name="[9f]"></a>prvReceiverTask</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, messagebufferdemo.o(.text.prvReceiverTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvReceiverTask &rArr; MPU_xStreamBufferReceive &rArr; xStreamBufferReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferReceive
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 2]<UL><LI> messagebufferdemo.o(.rodata..L__const.vStartMessageBufferTasks.xReceivingTask1Parameters)
<LI> messagebufferdemo.o(.rodata..L__const.vStartMessageBufferTasks.xReceivingTask2Parameters)
</UL>
<P><STRONG><a name="[99]"></a>prvSpaceAvailableCoherenceActor</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, messagebufferdemo.o(.text.prvSpaceAvailableCoherenceActor))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvSpaceAvailableCoherenceActor &rArr; MPU_xStreamBufferSend &rArr; xStreamBufferSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferSpacesAvailable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferReceive
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferSend
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messagebufferdemo.o(.rodata..L__const.vStartMessageBufferTasks.xCoherenceActorTaskParameters)
</UL>
<P><STRONG><a name="[9a]"></a>prvSpaceAvailableCoherenceTester</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, messagebufferdemo.o(.text.prvSpaceAvailableCoherenceTester))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvSpaceAvailableCoherenceTester &rArr; MPU_xStreamBufferSpacesAvailable &rArr; xStreamBufferSpacesAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferSpacesAvailable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messagebufferdemo.o(.rodata..L__const.vStartMessageBufferTasks.xCoherenceTesterTaskParameters)
</UL>
<P><STRONG><a name="[74]"></a>vPolledQueueConsumer</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, pollq.o(.text.vPolledQueueConsumer))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = vPolledQueueConsumer &rArr; MPU_xQueueReceive &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueReceive
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxQueueMessagesWaiting
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelay
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pollq.o(.text.vStartPolledQueueTasks)
</UL>
<P><STRONG><a name="[75]"></a>vPolledQueueProducer</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, pollq.o(.text.vPolledQueueProducer))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = vPolledQueueProducer &rArr; MPU_xQueueGenericSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelay
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pollq.o(.text.vStartPolledQueueTasks)
</UL>
<P><STRONG><a name="[77]"></a>prvMediumPriorityPeekTask</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, qpeek.o(.text.prvMediumPriorityPeekTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prvMediumPriorityPeekTask &rArr; MPU_xQueuePeek &rArr; xQueuePeek &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueuePeek
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxQueueMessagesWaiting
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskSuspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qpeek.o(.text.vStartQueuePeekTasks)
</UL>
<P><STRONG><a name="[78]"></a>prvHighPriorityPeekTask</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, qpeek.o(.text.prvHighPriorityPeekTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prvHighPriorityPeekTask &rArr; MPU_xQueuePeek &rArr; xQueuePeek &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueuePeek
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueReceive
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxQueueMessagesWaiting
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskSuspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qpeek.o(.text.vStartQueuePeekTasks)
</UL>
<P><STRONG><a name="[79]"></a>prvHighestPriorityPeekTask</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, qpeek.o(.text.prvHighestPriorityPeekTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prvHighestPriorityPeekTask &rArr; MPU_xQueuePeek &rArr; xQueuePeek &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueuePeek
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueReceive
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxQueueMessagesWaiting
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskSuspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qpeek.o(.text.vStartQueuePeekTasks)
</UL>
<P><STRONG><a name="[7a]"></a>prvLowPriorityPeekTask</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, qpeek.o(.text.prvLowPriorityPeekTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = prvLowPriorityPeekTask &rArr; MPU_xQueueGenericSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueuePeek
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueReceive
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxQueueMessagesWaiting
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskResume
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qpeek.o(.text.vStartQueuePeekTasks)
</UL>
<P><STRONG><a name="[76]"></a>prvQueueOverwriteTask</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, queueoverwrite.o(.text.prvQueueOverwriteTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = prvQueueOverwriteTask &rArr; MPU_xQueueGenericSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueuePeek
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueReceive
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxQueueMessagesWaiting
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> queueoverwrite.o(.text.vStartQueueOverwriteTask)
</UL>
<P><STRONG><a name="[a3]"></a>prvQueueSetSendingTask</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, queueset.o(.text.prvQueueSetSendingTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prvQueueSetSendingTask &rArr; MPU_xQueueGenericSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvChangeRelativePriorities
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRand
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSRand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> queueset.o(.rodata..L__const.vStartQueueSetTasks.xQueueSetSendingTaskParameters)
</UL>
<P><STRONG><a name="[227]"></a>prvSRand</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, queueset.o(.text.prvSRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvSRand
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSetSendingTask
</UL>

<P><STRONG><a name="[228]"></a>prvRand</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queueset.o(.text.prvRand))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSetSendingTask
</UL>

<P><STRONG><a name="[1f5]"></a>prvChangeRelativePriorities</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, queueset.o(.text.prvChangeRelativePriorities))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prvChangeRelativePriorities &rArr; MPU_vTaskDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskPrioritySet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSetSendingTask
</UL>

<P><STRONG><a name="[a2]"></a>prvQueueSetReceivingTask</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, queueset.o(.text.prvQueueSetReceivingTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = prvQueueSetReceivingTask &rArr; prvSetupTest &rArr; prvTestQueueOverwriteOnTwoQueusInQueueSet &rArr; MPU_xQueueSelectFromSet &rArr; xQueueSelectFromSet &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueSelectFromSet
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueReceive
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskPriorityGet
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckReceivedValue
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> queueset.o(.rodata..L__const.vStartQueueSetTasks.xQueueSetReceivingTaskParameters)
</UL>
<P><STRONG><a name="[226]"></a>prvSetupTest</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, queueset.o(.text.prvSetupTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = prvSetupTest &rArr; prvTestQueueOverwriteOnTwoQueusInQueueSet &rArr; MPU_xQueueSelectFromSet &rArr; xQueueSelectFromSet &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueRemoveFromSet
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueAddToSet
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueSelectFromSet
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueCreateSet
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueReceive
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericCreate
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskResume
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestQueueOverwriteOnTwoQueusInQueueSet
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestQueueOverwriteWithQueueSet
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSetReceivingTask
</UL>

<P><STRONG><a name="[1f7]"></a>prvCheckReceivedValue</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, queueset.o(.text.prvCheckReceivedValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvCheckReceivedValue &rArr; prvCheckReceivedValueWithinExpectedRange
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckReceivedValueWithinExpectedRange
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvQueueSetReceivingTask
</UL>

<P><STRONG><a name="[230]"></a>prvTestQueueOverwriteWithQueueSet</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, queueset.o(.text.prvTestQueueOverwriteWithQueueSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = prvTestQueueOverwriteWithQueueSet &rArr; MPU_xQueueSelectFromSet &rArr; xQueueSelectFromSet &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vQueueDelete
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueRemoveFromSet
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueAddToSet
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueSelectFromSet
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueuePeek
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueReceive
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxQueueMessagesWaiting
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTest
</UL>

<P><STRONG><a name="[231]"></a>prvTestQueueOverwriteOnTwoQueusInQueueSet</STRONG> (Thumb, 712 bytes, Stack size 64 bytes, queueset.o(.text.prvTestQueueOverwriteOnTwoQueusInQueueSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = prvTestQueueOverwriteOnTwoQueusInQueueSet &rArr; MPU_xQueueSelectFromSet &rArr; xQueueSelectFromSet &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vQueueDelete
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueRemoveFromSet
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueAddToSet
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueSelectFromSet
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueuePeek
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueReceive
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxQueueMessagesWaiting
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTest
</UL>

<P><STRONG><a name="[1f8]"></a>prvCheckReceivedValueWithinExpectedRange</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, queueset.o(.text.prvCheckReceivedValueWithinExpectedRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvCheckReceivedValueWithinExpectedRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckReceivedValue
</UL>

<P><STRONG><a name="[a1]"></a>prvQueueSetReceivingTask</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, queuesetpolling.o(.text.prvQueueSetReceivingTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = prvQueueSetReceivingTask &rArr; MPU_xQueueSelectFromSet &rArr; xQueueSelectFromSet &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueSelectFromSet
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> queuesetpolling.o(.rodata..L__const.vStartQueueSetPollingTask.xQueueSetReceivingTaskParameters)
</UL>
<P><STRONG><a name="[a5]"></a>prvRecursiveMutexControllingTask</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, recmutex.o(.text.prvRecursiveMutexControllingTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = prvRecursiveMutexControllingTask &rArr; MPU_xQueueTakeMutexRecursive &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGiveMutexRecursive
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueTakeMutexRecursive
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskSuspend
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> recmutex.o(.rodata..L__const.vStartRecursiveMutexTasks.xRecursiveMutexControllingTaskParameters)
</UL>
<P><STRONG><a name="[a4]"></a>prvRecursiveMutexBlockingTask</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, recmutex.o(.text.prvRecursiveMutexBlockingTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = prvRecursiveMutexBlockingTask &rArr; MPU_xQueueTakeMutexRecursive &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGiveMutexRecursive
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueTakeMutexRecursive
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskSuspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> recmutex.o(.rodata..L__const.vStartRecursiveMutexTasks.xRecursiveMutexBlockingTaskParameters)
</UL>
<P><STRONG><a name="[a6]"></a>prvRecursiveMutexPollingTask</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, recmutex.o(.text.prvRecursiveMutexPollingTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = prvRecursiveMutexPollingTask &rArr; MPU_xQueueTakeMutexRecursive &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGiveMutexRecursive
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueTakeMutexRecursive
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskResume
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_eTaskGetState
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskPriorityGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> recmutex.o(.rodata..L__const.vStartRecursiveMutexTasks.xRecursiveMutexPollingTaskParameters)
</UL>
<P><STRONG><a name="[7b]"></a>prvSemaphoreTest</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, semtest.o(.text.prvSemaphoreTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = prvSemaphoreTest &rArr; MPU_xQueueGenericSend &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueSemaphoreTake
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xQueueGenericSend
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelay
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> semtest.o(.text.vStartSemaphoreTasks)
</UL>
<P><STRONG><a name="[ab]"></a>prvEchoServer</STRONG> (Thumb, 196 bytes, Stack size 88 bytes, streambufferdemo.o(.text.prvEchoServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = prvEchoServer &rArr; prvSingleTaskTests &rArr; MPU_xStreamBufferSend &rArr; xStreamBufferSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferReceive
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferSend
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskResume
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskPriorityGet
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckExpectedState
</UL>
<BR>[Address Reference Count : 2]<UL><LI> streambufferdemo.o(.rodata..L__const.vStartStreamBufferTasks.xEchoServerTask1Parameters)
<LI> streambufferdemo.o(.rodata..L__const.vStartStreamBufferTasks.xEchoServerTask2Parameters)
</UL>
<P><STRONG><a name="[217]"></a>prvCheckExpectedState</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, streambufferdemo.o(.text.prvCheckExpectedState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvCheckExpectedState
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReceiverTask
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSenderTask
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoClient
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNonBlockingSenderTask
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoServer
</UL>

<P><STRONG><a name="[219]"></a>prvSingleTaskTests</STRONG> (Thumb, 2384 bytes, Stack size 232 bytes, streambufferdemo.o(.text.prvSingleTaskTests))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = prvSingleTaskTests &rArr; MPU_xStreamBufferSend &rArr; xStreamBufferSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferBytesAvailable
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferSpacesAvailable
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferReset
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferIsEmpty
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferIsFull
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferReceive
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferSend
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskPrioritySet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskPriorityGet
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceiveFromISR
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckExpectedState
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSenderTask
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEchoServer
</UL>

<P><STRONG><a name="[ad]"></a>prvNonBlockingReceiverTask</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, streambufferdemo.o(.text.prvNonBlockingReceiverTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvNonBlockingReceiverTask &rArr; MPU_xStreamBufferReceive &rArr; xStreamBufferReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferReceive
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> streambufferdemo.o(.rodata..L__const.vStartStreamBufferTasks.xNonBlockingReceiverTaskParameters)
</UL>
<P><STRONG><a name="[ae]"></a>prvNonBlockingSenderTask</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, streambufferdemo.o(.text.prvNonBlockingSenderTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvNonBlockingSenderTask &rArr; MPU_xStreamBufferSend &rArr; xStreamBufferSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferSend
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckExpectedState
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> streambufferdemo.o(.rodata..L__const.vStartStreamBufferTasks.xNonBlockingSenderTaskParameters)
</UL>
<P><STRONG><a name="[ac]"></a>prvInterruptTriggerLevelTest</STRONG> (Thumb, 384 bytes, Stack size 72 bytes, streambufferdemo.o(.text.prvInterruptTriggerLevelTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = prvInterruptTriggerLevelTest &rArr; MPU_xStreamBufferGenericCreate &rArr; xStreamBufferGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferGenericCreate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vStreamBufferDelete
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferReceive
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelay
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> streambufferdemo.o(.rodata..L__const.vStartStreamBufferTasks.xInterruptTriggerLevelTestTaskParameters)
</UL>
<P><STRONG><a name="[aa]"></a>prvEchoClient</STRONG> (Thumb, 528 bytes, Stack size 136 bytes, streambufferdemo.o(.text.prvEchoClient))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = prvEchoClient &rArr; MPU_xStreamBufferGenericCreate &rArr; xStreamBufferGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferGenericCreate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vStreamBufferDelete
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferReceive
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferSend
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskPriorityGet
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckExpectedState
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 2]<UL><LI> streambufferdemo.o(.rodata..L__const.vStartStreamBufferTasks.xEchoClientTask1Parameters)
<LI> streambufferdemo.o(.rodata..L__const.vStartStreamBufferTasks.xEchoClientTask2Parameters)
</UL>
<P><STRONG><a name="[b0]"></a>prvSenderTask</STRONG> (Thumb, 304 bytes, Stack size 120 bytes, streambufferdemo.o(.text.prvSenderTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = prvSenderTask &rArr; prvSingleTaskTests &rArr; MPU_xStreamBufferSend &rArr; xStreamBufferSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferGenericCreateStatic
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferReset
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vStreamBufferDelete
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferSend
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskResume
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskPriorityGet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelay
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckExpectedState
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 2]<UL><LI> streambufferdemo.o(.rodata..L__const.vStartStreamBufferTasks.xSenderTask1Parameters)
<LI> streambufferdemo.o(.rodata..L__const.vStartStreamBufferTasks.xSenderTask2Parameters)
</UL>
<P><STRONG><a name="[af]"></a>prvReceiverTask</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, streambufferdemo.o(.text.prvReceiverTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvReceiverTask &rArr; MPU_xStreamBufferReceive &rArr; xStreamBufferReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferReceive
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckExpectedState
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 2]<UL><LI> streambufferdemo.o(.rodata..L__const.vStartStreamBufferTasks.xReceivingTask1Parameters)
<LI> streambufferdemo.o(.rodata..L__const.vStartStreamBufferTasks.xReceivingTask2Parameters)
</UL>
<P><STRONG><a name="[a9]"></a>prvReceivingTask</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, streambufferinterrupt.o(.text.prvReceivingTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvReceivingTask &rArr; MPU_xStreamBufferReceive &rArr; xStreamBufferReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xStreamBufferReceive
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> streambufferinterrupt.o(.rodata..L__const.vStartStreamBufferInterruptDemo.xReceivingTaskParameters)
</UL>
<P><STRONG><a name="[a7]"></a>prvRegTest1_Task</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, reg_tests.o(.text.prvRegTest1_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvRegTest1_Task &rArr; MPU_vTaskDelete &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRegTest1Asm_NonSecure
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> reg_tests.o(.rodata..L__const.vStartRegisterTasks.xRegTest1TaskParameters)
</UL>
<P><STRONG><a name="[a8]"></a>prvRegTest2_Task</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, reg_tests.o(.text.prvRegTest2_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvRegTest2_Task &rArr; MPU_vTaskDelete &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRegTest2Asm_NonSecure
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> reg_tests.o(.rodata..L__const.vStartRegisterTasks.xRegTest2TaskParameters)
</UL>
<P><STRONG><a name="[7f]"></a>prvRand</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasknotify.o(.text.prvRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvRand
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifiedTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasknotify.o(.text.vStartTaskNotifyTask)
</UL>
<P><STRONG><a name="[80]"></a>prvNotifyingTimer</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tasknotify.o(.text.prvNotifyingTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvNotifyingTimer &rArr; MPU_xTaskGenericNotify &rArr; xTaskGenericNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotify
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasknotify.o(.text.vStartTaskNotifyTask)
</UL>
<P><STRONG><a name="[81]"></a>prvSuspendedTaskTimerTestCallback</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, tasknotify.o(.text.prvSuspendedTaskTimerTestCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvSuspendedTaskTimerTestCallback &rArr; MPU_xTaskGenericNotify &rArr; xTaskGenericNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotify
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskResume
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskSuspend
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_eTaskGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasknotify.o(.text.vStartTaskNotifyTask)
</UL>
<P><STRONG><a name="[b2]"></a>prvNotifiedTask</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, tasknotify.o(.text.prvNotifiedTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = prvNotifiedTask &rArr; prvSingleTaskTests &rArr; MPU_xTimerGenericCommand &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerGenericCommand
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_ulTaskGenericNotifyTake
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskPrioritySet
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasknotify.o(.rodata..L__const.vStartTaskNotifyTask.xNotifiedTask)
</UL>
<P><STRONG><a name="[222]"></a>prvSingleTaskTests</STRONG> (Thumb, 1864 bytes, Stack size 136 bytes, tasknotify.o(.text.prvSingleTaskTests))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = prvSingleTaskTests &rArr; MPU_xTimerGenericCommand &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerGenericCommand
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_ulTaskGenericNotifyValueClear
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotifyStateClear
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotifyWait
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotify
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskPrioritySet
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifiedTask
</UL>

<P><STRONG><a name="[7c]"></a>prvSuspendedTaskTimerTestCallback</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, tasknotifyarray.o(.text.prvSuspendedTaskTimerTestCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = prvSuspendedTaskTimerTestCallback &rArr; MPU_xTaskGenericNotify &rArr; xTaskGenericNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotify
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskResume
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskSuspend
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_eTaskGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasknotifyarray.o(.text.vStartTaskNotifyArrayTask)
</UL>
<P><STRONG><a name="[7d]"></a>prvNotifyingTimerCallback</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, tasknotifyarray.o(.text.prvNotifyingTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvNotifyingTimerCallback &rArr; MPU_xTaskGenericNotify &rArr; xTaskGenericNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasknotifyarray.o(.text.vStartTaskNotifyArrayTask)
</UL>
<P><STRONG><a name="[7e]"></a>prvRand</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasknotifyarray.o(.text.prvRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvRand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasknotifyarray.o(.text.vStartTaskNotifyArrayTask)
</UL>
<P><STRONG><a name="[b1]"></a>prvNotifiedTask</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tasknotifyarray.o(.text.prvNotifiedTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = prvNotifiedTask &rArr; prvBlockOnTheNotifiedIndexed &rArr; MPU_xTimerGenericCommand &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockOnNotificationsComingFromInterrupts
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockOnANonNotifiedIndexed
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvBlockOnTheNotifiedIndexed
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestNotifyTaskWhileSuspended
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSingleTaskTests
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasknotifyarray.o(.rodata..L__const.vStartTaskNotifyArrayTask.xNotifiedTask)
</UL>
<P><STRONG><a name="[223]"></a>prvSingleTaskTests</STRONG> (Thumb, 2986 bytes, Stack size 104 bytes, tasknotifyarray.o(.text.prvSingleTaskTests))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvSingleTaskTests &rArr; MPU_xTaskGenericNotifyWait &rArr; xTaskGenericNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_ulTaskGenericNotifyValueClear
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotifyStateClear
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotifyWait
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotify
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifiedTask
</UL>

<P><STRONG><a name="[224]"></a>prvTestNotifyTaskWhileSuspended</STRONG> (Thumb, 462 bytes, Stack size 64 bytes, tasknotifyarray.o(.text.prvTestNotifyTaskWhileSuspended))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = prvTestNotifyTaskWhileSuspended &rArr; MPU_xTimerGenericCommand &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerGenericCommand
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotifyWait
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskPrioritySet
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifiedTask
</UL>

<P><STRONG><a name="[1eb]"></a>prvBlockOnTheNotifiedIndexed</STRONG> (Thumb, 328 bytes, Stack size 64 bytes, tasknotifyarray.o(.text.prvBlockOnTheNotifiedIndexed))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = prvBlockOnTheNotifiedIndexed &rArr; MPU_xTimerGenericCommand &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerGenericCommand
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotifyStateClear
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_ulTaskGenericNotifyTake
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotifyWait
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotify
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifiedTask
</UL>

<P><STRONG><a name="[1e9]"></a>prvBlockOnANonNotifiedIndexed</STRONG> (Thumb, 344 bytes, Stack size 56 bytes, tasknotifyarray.o(.text.prvBlockOnANonNotifiedIndexed))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = prvBlockOnANonNotifiedIndexed &rArr; MPU_xTimerGenericCommand &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerGenericCommand
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_ulTaskGenericNotifyValueClear
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotifyWait
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifiedTask
</UL>

<P><STRONG><a name="[1ea]"></a>prvBlockOnNotificationsComingFromInterrupts</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, tasknotifyarray.o(.text.prvBlockOnNotificationsComingFromInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvBlockOnNotificationsComingFromInterrupts &rArr; MPU_xTaskGenericNotifyWait &rArr; xTaskGenericNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotifyStateClear
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_ulTaskGenericNotifyTake
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotifyWait
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGenericNotify
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifiedTask
</UL>

<P><STRONG><a name="[b3]"></a>prvCheckTask</STRONG> (Thumb, 812 bytes, Stack size 24 bytes, testrunner.o(.text.prvCheckTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prvCheckTask &rArr; xAreRegisterTasksStillRunning &rArr; MPU_xTaskDelayUntil &rArr; xTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xAreCountingSemaphoreTasksStillRunning
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xAreBlockTimeTestTasksStillRunning
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xAreBlockingQueuesStillRunning
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xAreAbortDelayTestTasksStillRunning
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskDelayUntil
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xAreTaskNotificationTasksStillRunning
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xAreRegisterTasksStillRunning
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsInterruptStreamBufferDemoStillRunning
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xAreStreamBufferTasksStillRunning
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xAreSemaphoreTasksStillRunning
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xAreRecursiveMutexTasksStillRunning
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xAreQueueSetPollTasksStillRunning
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xAreQueueSetTasksStillRunning
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsQueueOverwriteTaskStillRunning
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xAreQueuePeekTasksStillRunning
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xArePollingQueuesStillRunning
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xAreMessageBufferTasksStillRunning
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xAreInterruptSemaphoreTasksStillRunning
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xAreIntQueueTasksStillRunning
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xAreIntegerMathsTaskStillRunning
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xAreGenericQueueTasksStillRunning
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xAreMathsTaskStillRunning
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xAreEventGroupTasksStillRunning
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xAreDynamicPriorityTasksStillRunning
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xAreTimerDemoTasksStillRunning
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xAreTaskNotificationArrayTasksStillRunning
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testrunner.o(.rodata..L__const.vStartTests.xCheckTaskParameters)
</UL>
<P><STRONG><a name="[234]"></a>prvTest1_CreateTimersWithoutSchedulerRunning</STRONG> (Thumb, 522 bytes, Stack size 40 bytes, timerdemo.o(.text.prvTest1_CreateTimersWithoutSchedulerRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = prvTest1_CreateTimersWithoutSchedulerRunning &rArr; MPU_xTimerGenericCommand &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerGenericCommand
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_pcTimerGetName
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTimerDemoTask
</UL>

<P><STRONG><a name="[82]"></a>prvOneShotTimerCallback</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, timerdemo.o(.text.prvOneShotTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvOneShotTimerCallback &rArr; MPU_vTimerSetTimerID &rArr; vTimerSetTimerID
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTimerSetTimerID
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_pvTimerGetTimerID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timerdemo.o(.text.vStartTimerDemoTask)
</UL>
<P><STRONG><a name="[b4]"></a>prvTimerTestTask</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, timerdemo.o(.text.prvTimerTestTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = prvTimerTestTask &rArr; prvTest7_CheckBacklogBehaviour &rArr; MPU_xTimerGenericCommand &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTimerGetReloadMode
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTimerSetReloadMode
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetStartConditionsForNextIteration
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest7_CheckBacklogBehaviour
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest6_CheckAutoReloadResetBehaviour
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest5_CheckBasicOneShotTimerBehaviour
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest4_CheckAutoReloadTimersCanBeStopped
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest3_CheckAutoReloadExpireRates
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTest2_CheckTaskAndTimersInitialState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timerdemo.o(.rodata..L__const.vStartTimerDemoTask.xTimerTestTaskParameters)
</UL>
<P><STRONG><a name="[235]"></a>prvTest2_CheckTaskAndTimersInitialState</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, timerdemo.o(.text.prvTest2_CheckTaskAndTimersInitialState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvTest2_CheckTaskAndTimersInitialState &rArr; MPU_xTimerIsTimerActive &rArr; xTimerIsTimerActive
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerIsTimerActive
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTestTask
</UL>

<P><STRONG><a name="[236]"></a>prvTest3_CheckAutoReloadExpireRates</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, timerdemo.o(.text.prvTest3_CheckAutoReloadExpireRates))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvTest3_CheckAutoReloadExpireRates &rArr; MPU_vTaskDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskPrioritySet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskPriorityGet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTestTask
</UL>

<P><STRONG><a name="[237]"></a>prvTest4_CheckAutoReloadTimersCanBeStopped</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, timerdemo.o(.text.prvTest4_CheckAutoReloadTimersCanBeStopped))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = prvTest4_CheckAutoReloadTimersCanBeStopped &rArr; MPU_xTimerGenericCommand &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerGenericCommand
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerIsTimerActive
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelay
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTestTask
</UL>

<P><STRONG><a name="[238]"></a>prvTest5_CheckBasicOneShotTimerBehaviour</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, timerdemo.o(.text.prvTest5_CheckBasicOneShotTimerBehaviour))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = prvTest5_CheckBasicOneShotTimerBehaviour &rArr; MPU_xTimerGenericCommand &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerGenericCommand
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerIsTimerActive
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTestTask
</UL>

<P><STRONG><a name="[239]"></a>prvTest6_CheckAutoReloadResetBehaviour</STRONG> (Thumb, 768 bytes, Stack size 56 bytes, timerdemo.o(.text.prvTest6_CheckAutoReloadResetBehaviour))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = prvTest6_CheckAutoReloadResetBehaviour &rArr; MPU_xTimerGenericCommand &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerGenericCommand
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerIsTimerActive
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTestTask
</UL>

<P><STRONG><a name="[23a]"></a>prvTest7_CheckBacklogBehaviour</STRONG> (Thumb, 504 bytes, Stack size 64 bytes, timerdemo.o(.text.prvTest7_CheckBacklogBehaviour))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = prvTest7_CheckBacklogBehaviour &rArr; MPU_xTimerGenericCommand &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerGenericCommand
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerIsTimerActive
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_vTaskPrioritySet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_uxTaskPriorityGet
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCatchUpTicks
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTestTask
</UL>

<P><STRONG><a name="[22b]"></a>prvResetStartConditionsForNextIteration</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, timerdemo.o(.text.prvResetStartConditionsForNextIteration))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = prvResetStartConditionsForNextIteration &rArr; MPU_xTimerGenericCommand &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerGenericCommand
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerIsTimerActive
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTestTask
</UL>

<P><STRONG><a name="[63]"></a>prvAutoReloadTimerCallback</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, timerdemo.o(.text.prvAutoReloadTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = prvAutoReloadTimerCallback &rArr; MPU_xTimerGenericCommand &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_xTimerGenericCommand
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_pvTimerGetTimerID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timerdemo.o(.text.prvTest1_CreateTimersWithoutSchedulerRunning)
</UL>
<P><STRONG><a name="[64]"></a>prvISRAutoReloadTimerCallback</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, timerdemo.o(.text.prvISRAutoReloadTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvISRAutoReloadTimerCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timerdemo.o(.text.prvTest1_CreateTimersWithoutSchedulerRunning)
</UL>
<P><STRONG><a name="[65]"></a>prvISROneShotTimerCallback</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, timerdemo.o(.text.prvISROneShotTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvISROneShotTimerCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timerdemo.o(.text.prvTest1_CreateTimersWithoutSchedulerRunning)
</UL>
<P><STRONG><a name="[1e2]"></a>prvSetupHardware</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, main.o(.text.prvSetupHardware))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvSetupHardware
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e4]"></a>prvCreateTasks</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text.prvCreateTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = prvCreateTasks &rArr; vStartTests &rArr; vStartMessageBufferTasks &rArr; MPU_xStreamBufferGenericCreate &rArr; xStreamBufferGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartMPUDemo
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartTests
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22e]"></a>SYS_UnlockReg</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main.o(.text.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[22f]"></a>SYS_LockReg</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text.SYS_LockReg))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[25a]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[258]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[25d]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[25c]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[84]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
